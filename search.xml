<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Freespire 9.0 发布，基于 Ubuntu 的 Linux 发行版</title>
    <url>//post/Freespire%209.0%20%E5%8F%91%E5%B8%83.html</url>
    <content><![CDATA[<blockquote>
<p>Freespire 是一个社区驱动的 Linux 发行版，它源于 Linspire。Freespire 1.0 基于 Debian，而 Freespire 2.0 及后续版本基于 Ubuntu。</p>
</blockquote>
<p>PC&#x2F;OS 开源开发团队近日发布了 Freespire 9.0 版本，其中的一些变化包括：</p>
<ul>
<li>XFCE 4.18</li>
<li>Linux 5.15</li>
<li>Firefox 网络浏览器</li>
<li>Thunderbird 102.42</li>
<li>OnlyOffice 办公套件</li>
<li>GIMP 2.10.32</li>
<li>Transmission 3.00</li>
<li>Balena Etcher</li>
<li>HexChat IRC 客户端</li>
<li>Parole 媒体播放器</li>
</ul>
<p>该版本还包括了截至 2023 年 1 月 17 日的所有安全更新，Freespire 9.0 不包括任何专有的编解码器或非开源的软件代码。</p>
<p>更多详情<a href="https://www.freespire.net/2023/01/freespire-90-released.html">点击这里查看</a></p>
]]></content>
      <categories>
        <category>开源资讯</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 8.2开发环境</title>
    <url>//post/CentOS%208.2%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.html</url>
    <content><![CDATA[<blockquote>
<p>说明: 本文档云服务器操作系统为 CentOS 8.2</p>
<p>命令：cat &#x2F;etc&#x2F;redhat-release</p>
<p>注意：涉及相应端口需要自己放行</p>
</blockquote>
<h2 id="0-安装工具"><a href="#0-安装工具" class="headerlink" title="0. 安装工具"></a>0. 安装工具</h2><h3 id="1-Yum-包管理器"><a href="#1-Yum-包管理器" class="headerlink" title="1) Yum 包管理器"></a>1) Yum 包管理器</h3><p><strong>Yum（全称为 Yellow dog Updater, Modified）是一个在 Fedora 和 RedHat 以及 CentOS 中的 Shell 前端软件包管理器。</strong></p>
<p>基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。yum 提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p>
<p><strong>使用 yum 安装和卸载软件，有个前提是 yum 安装的软件包都是 rpm 格式的</strong></p>
<p>yum 常用命令学习：<a href="https://www.runoob.com/linux/linux-yum.html">https://www.runoob.com/linux/linux-yum.html</a></p>
<p>我们更新 yum 源为阿里镜像</p>
<ul>
<li>备份</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd /etc/yum.repos.d/<br>mkdir bak<br>mv *.repo bak/<br></code></pre></td></tr></table></figure>

<ul>
<li>下载新的 yum 源</li>
</ul>
<p>当前目录为：**&#x2F;etc&#x2F;yum.repos.d&#x2F;**</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">wget https://mirrors.aliyun.com/repo/Centos-8.repo<br></code></pre></td></tr></table></figure>

<p>查看</p>
<img src="https://niit-soft.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210714154542495.png" style="zoom:50%;margin-left:0;" />

<ul>
<li>清除 yum 历史</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum clean all<br></code></pre></td></tr></table></figure>

<ul>
<li>重新生成</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum makecache<br></code></pre></td></tr></table></figure>

<ul>
<li>验证</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum --version<br></code></pre></td></tr></table></figure>

<img src="https://niit-soft.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210714155423362.png" style="zoom:50%;margin-left:0;" />

<h3 id="2-gcc-和-make-插件"><a href="#2-gcc-和-make-插件" class="headerlink" title="2) gcc 和 make 插件"></a>2) gcc 和 make 插件</h3><p>GCC 代表: <strong>the GNU Compiler Collection</strong>，表示 C 语言编译器的合集， g++则是 GCC 的 c++编译器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum install gcc gcc-c++<br>yum -y install gcc automake autoconf libtool make<br>yum groupinstall -y &#x27;Development Tools&#x27;<br>yum install -y gcc openssl-devel bzip2-devel libffi-devel<br></code></pre></td></tr></table></figure>

<h2 id="1-OpenJDK-安装和配置"><a href="#1-OpenJDK-安装和配置" class="headerlink" title="1. OpenJDK 安装和配置"></a>1. OpenJDK 安装和配置</h2><h3 id="1-查看-yum-源"><a href="#1-查看-yum-源" class="headerlink" title="1) 查看 yum 源"></a>1) 查看 yum 源</h3><p>先查看 yum 源中有什么版本（JDK 关键字标红）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum search java | grep -i --color JDK<br></code></pre></td></tr></table></figure>

<img src="https://niit-soft.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210714155948648.png" style="zoom:40%;margin-left:0;" />

<h3 id="2-安装-openjdk1-8"><a href="#2-安装-openjdk1-8" class="headerlink" title="2) 安装 openjdk1.8"></a>2) 安装 openjdk1.8</h3><p>命令如下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum install java-1.8.0-openjdk  java-1.8.0-openjdk-devel<br></code></pre></td></tr></table></figure>

<img src="https://niit-soft.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210714160247638.png" style="zoom:30%;margin-left:0;" />

<p>默认安装位置为：**&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;**</p>
<h3 id="3-配置环境"><a href="#3-配置环境" class="headerlink" title="3) 配置环境"></a>3) 配置环境</h3><p>然后编辑.bashrc 文件，在最后添加 JAVA_HOME 配置等，退出生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vim ~/.bashrc<br>export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.222.b10-0.el7_6.x86_64<br>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br>export PATH=.:$JAVA_HOME/bin:$PATH<br>source ~/.bashrc<br></code></pre></td></tr></table></figure>

<p>查看是否生效</p>
<img src="https://niit-soft.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210714160549887.png" style="zoom:50%;margin-left:0;" />

<h2 id="2-Maven-安装和配置"><a href="#2-Maven-安装和配置" class="headerlink" title="2. Maven 安装和配置"></a>2. Maven 安装和配置</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1) 下载"></a>1) 下载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建tools目录</span><br>mkdir /home/tools<br>cd /home/tools<br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用wget下载,如果443就多试两次</span><br>wget https://www-us.apache.org/dist/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.tar.gz<br></code></pre></td></tr></table></figure>

<p><a href="https://maven.apache.org/download.cgi">这里</a> 是 maven 的最新版下载页面，如果在线下载很慢的话，可以手动下载 maven 的压缩包后上传到&#x2F;home&#x2F;tools</p>
<h3 id="2-解压"><a href="#2-解压" class="headerlink" title="2) 解压"></a>2) 解压</h3><p>下载完成或者手动上传完成后，解压到<code>/opt</code>目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo tar xf /home/tools/apache-maven-3.8.1-bin.tar.gz -C /opt<br></code></pre></td></tr></table></figure>

<h3 id="3-创建虚拟链接"><a href="#3-创建虚拟链接" class="headerlink" title="3) 创建虚拟链接"></a>3) 创建虚拟链接</h3><p>创建一个虚拟链接<code>maven</code>指向 Maven 安装目录，方便控制 Maven 版本和升级</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo ln -s /opt/apache-maven-3.8.1 /opt/maven<br></code></pre></td></tr></table></figure>

<h3 id="4-设置环境变量"><a href="#4-设置环境变量" class="headerlink" title="4) 设置环境变量"></a>4) 设置环境变量</h3><p>在<code>/etc/profile.d/</code>目录下创建一个名为 <code>mavenenv.sh</code>的新文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo nano /etc/profile.d/maven.sh<br></code></pre></td></tr></table></figure>

<p>粘贴以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.292.b10-1.el8_4.x86_64<br>export M2_HOME=/opt/maven<br>export MAVEN_HOME=/opt/maven<br>export PATH=$&#123;M2_HOME&#125;/bin:$&#123;PATH&#125;<br></code></pre></td></tr></table></figure>

<img src="https://niit-soft.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210714162001450.png" style="zoom:33%;margin-left:0;" />

<p>然后按 Y，回车退出 nano，这个脚本将会在 shell 启动时执行</p>
<p>运行 <code>chmod</code>命令，使脚本可执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo chmod +x /etc/profile.d/maven.sh<br></code></pre></td></tr></table></figure>

<p>使用<code>source</code>命令加载环境变量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">source /etc/profile.d/maven.sh<br></code></pre></td></tr></table></figure>

<h3 id="4-验证安装"><a href="#4-验证安装" class="headerlink" title="4) 验证安装"></a>4) 验证安装</h3><p>输入以下命令验证 maven 是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mvn -version<br></code></pre></td></tr></table></figure>

<p><img src="https://niit-soft.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210714162715150.png"></p>
<h3 id="5-配置-Maven-镜像"><a href="#5-配置-Maven-镜像" class="headerlink" title="5) 配置 Maven 镜像"></a>5) 配置 Maven 镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vim /opt/maven/conf/settings.xml<br></code></pre></td></tr></table></figure>

<p>配置 mirrors 节点：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>阿里云公共仓库<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>编辑完成保存退出即可</p>
<h2 id="3-Git-安装和配置"><a href="#3-Git-安装和配置" class="headerlink" title="3. Git 安装和配置"></a>3. Git 安装和配置</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1) 安装"></a>1) 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum install -y git<br></code></pre></td></tr></table></figure>

<p>查看版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git --version<br></code></pre></td></tr></table></figure>

<img src="https://niit-soft.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210714163859205.png" style="zoom:50%;margin-left:0;" />

<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2) 配置"></a>2) 配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;你的用户名&quot;<br>git config --global user.email &quot;你的邮箱&quot;<br></code></pre></td></tr></table></figure>

<p>查看配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git config --list<br></code></pre></td></tr></table></figure>

<h2 id="4-Python-安装和配置"><a href="#4-Python-安装和配置" class="headerlink" title="4. Python 安装和配置"></a>4. Python 安装和配置</h2><h3 id="1-安装-1"><a href="#1-安装-1" class="headerlink" title="1) 安装"></a>1) 安装</h3><p>在 &#x2F;home 下创建一个目录如 tools，进入该目录</p>
<p>依次运行以下命令，用于安装 Python3.8、设置软链接、升级 pip3（如果第一步因为网络问题 wget 下载失败，多试几次，或手动下载后上传）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">wget https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tgztar -zxvf Python-3.8.1.tgzmkdir /usr/local/python3 cd Python-3.8.1./configure --prefix=/usr/local/python3 --enable-optimizations --with-ssl make &amp;&amp; make installln -s /usr/local/python3/bin/python3 /usr/local/bin/python3ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3pip3 install --upgrade pip<br></code></pre></td></tr></table></figure>

<img src="https://niit-soft.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210714171335462.png" style="zoom:40%;margin-left:0;" />

<h3 id="2-查看版本"><a href="#2-查看版本" class="headerlink" title="2) 查看版本"></a>2) 查看版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">python -V<br>pip3 -V<br></code></pre></td></tr></table></figure>

<img src="https://niit-soft.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210714171502409.png" style="zoom:45%;margin-left:0;" />

<h2 id="5-Docker"><a href="#5-Docker" class="headerlink" title="5. Docker"></a>5. Docker</h2><h3 id="1-Docker-安装"><a href="#1-Docker-安装" class="headerlink" title="1) Docker 安装"></a>1) Docker 安装</h3><ul>
<li>卸载老版本</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum remove docker  docker-client  docker-client-latest \  docker-common \ docker-latest \               docker-latest-logrotate \                docker-logrotate \  docker-engine<br></code></pre></td></tr></table></figure>

<ul>
<li>安装 docker 基础包</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure>

<ul>
<li>设置稳定仓库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum-config-manager \    --add-repo \    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure>

<ul>
<li>安装 Docker Engine - Community</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">step1： 查看版本</span><br>yum list docker-ce --showduplicates | sort -r<br><span class="hljs-meta prompt_"># </span><span class="language-bash">step2： 安装指定版本，这里安装20.10.7-3.el8版本</span><br>sudo yum install docker-ce-20.10.7-3.el8 docker-ce-cli-20.10.7-3.el8 containerd.io<br></code></pre></td></tr></table></figure>

<ul>
<li>启动与测试</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo systemctl start docker  # 开机启动<br>dockerdocker version         # 查看版本docker<br>run hello-world              # 测试，如果出443的问题，多试几次<br></code></pre></td></tr></table></figure>

<img src="https://niit-soft.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210714173155782.png"  style="zoom:35%;margin-left:0;" />

<h3 id="2-Docker-国内镜像配置"><a href="#2-Docker-国内镜像配置" class="headerlink" title="2) Docker 国内镜像配置"></a>2) Docker 国内镜像配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vim /etc/docker/daemon.json<br></code></pre></td></tr></table></figure>

<p>粘贴以下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;https://registry.cn-hangzhou.aliyuncs.com/&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;http://f1361db2.m.daocloud.io&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;https://mirror.ccs.tencentyun.com&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>

<p>保存退出后重启 docker 即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo systemctl restart docker<br></code></pre></td></tr></table></figure>

<h3 id="3-Docker-compose-安装"><a href="#3-Docker-compose-安装" class="headerlink" title="3) Docker-compose 安装"></a>3) Docker-compose 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装</span><br>sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/ docker-compose<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改权限</span><br>sudo chmod +x /usr/local/bin/docker-compose<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建软链</span><br>sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose<br><span class="hljs-meta prompt_"># </span><span class="language-bash">测试是否安装成功</span><br>docker-compose --version<br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出：</span><br>docker-compose version 1.27.4, build xxx<br></code></pre></td></tr></table></figure>

<h2 id="6-docker-安装-MySQL"><a href="#6-docker-安装-MySQL" class="headerlink" title="6. docker 安装 MySQL"></a>6. docker 安装 MySQL</h2><h3 id="1-拉取-MySQL-镜像"><a href="#1-拉取-MySQL-镜像" class="headerlink" title="1) 拉取 MySQL 镜像"></a>1) 拉取 MySQL 镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker pull mysql:8.0.25<br></code></pre></td></tr></table></figure>

<h3 id="2-运行"><a href="#2-运行" class="headerlink" title="2) 运行"></a>2) 运行</h3><p>创建&#x2F;home&#x2F;mysql 目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd /homemkdir /mysql<br></code></pre></td></tr></table></figure>

<p>运行以下命令，将密码替换为自己需要的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -d --name myMysql -p 9506:3306 -v /home/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:8.0.25<br></code></pre></td></tr></table></figure>

<p><strong>参数解析：</strong><br><code>-d</code>: 后台运行容器，并返回容器 ID<br><code>--name myMysql</code>: 为容器指定一个名称<br><code>-p</code>: 指定端口映射，格式为：主机(宿主)端口:容器端口，这里宿主机用 9506 端口，容器用 3306 端口<br><code>-v</code>: 绑定一个卷，主机的目录&#x2F;data&#x2F;mysql ，映射到容器的 &#x2F;var&#x2F;lib&#x2F;mysql<br><code>-e MYSQL_ROOT_PASSWORD=123456</code>: 设置环境变量，密码设置为 123456<br><code>mysql:8.0.25</code>：使用镜像 mysql:8.0.25</p>
<h3 id="3-修改数据库密码"><a href="#3-修改数据库密码" class="headerlink" title="3) 修改数据库密码"></a>3) 修改数据库密码</h3><p>此时运行 <code>docker ps</code> 可以看到容器正在运行</p>
<p><img src="https://niit-soft.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210714175938755.png"></p>
<p>进入到容器命令为：<code>docker exec -it [容器ID] /bin/bash</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将容器ID替换为上图中的</span><br>docker exec -it 1c94c6403fd4 /bin/bash<br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用mysql账号密码登录</span><br>mysql -uroot -p<br></code></pre></td></tr></table></figure>

<img src="https://niit-soft.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210714180245070.png"  style="zoom:35%;margin-left:0;" />

<p>在 mysql 命令行分别执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">show databases;use mysql;<br>ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;<br>flush privileges;exit<br></code></pre></td></tr></table></figure>

<img src="https://niit-soft.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210714181136355.png" style="zoom:40%;margin-left:0;" />

<p>可以看到新密码生效（但是这里只是修改了 docker 容器内的 mysql 密码），输入 exit 依次退出 mysql 和 docker 容器</p>
<img src="https://niit-soft.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210714182140577.png"  style="zoom:50%;margin-left:0;" />

<p>使用 navicat 可以连接到刚刚安装的 MySQL，注意端口要填宿主机的（<strong>注意密码要用第一次安装的：123456</strong>）</p>
 <img src="https://niit-soft.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210714182432043.png" style="zoom:33%;" />

<h2 id="7-docker-安装-Redis"><a href="#7-docker-安装-Redis" class="headerlink" title="7. docker 安装 Redis"></a>7. docker 安装 Redis</h2><h3 id="1-拉取最新镜像"><a href="#1-拉取最新镜像" class="headerlink" title="1) 拉取最新镜像"></a>1) 拉取最新镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker pull redis<br></code></pre></td></tr></table></figure>

<h3 id="2-运行-1"><a href="#2-运行-1" class="headerlink" title="2) 运行"></a>2) 运行</h3><p>默认会在 <code>6379</code> 端口启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run --name mqxu-redis -d -p 6379:6379 redis<br></code></pre></td></tr></table></figure>

<p>使用桌面连接工具测试连接情况</p>
<img src="https://niit-soft.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210714183011051.png" alt="image-20210714183011051" style="zoom:33%;margin-left:0;" />

<img src="https://niit-soft.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210714183139063.png" alt="image-20210714183139063" style="zoom:28%;margin-left:0;" />

<h2 id="8-Nacos"><a href="#8-Nacos" class="headerlink" title="8. Nacos"></a>8. Nacos</h2><blockquote>
<p>官方文档：<a href="https://nacos.io/zh-cn/docs/quick-start.html">https://nacos.io/zh-cn/docs/quick-start.html</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入 /home/tools目录</span><br>cd /home/tools<br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载release包,亲测这个要快点</span><br>wget https://github.com/alibaba/nacos/releases/download/2.0.2/nacos-server-2.0.2.tar.gz<br>tar -xvf nacos-server-2.0.2.tar.gz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果要修改nacos的启动端口，可以编辑nacos/conf/application.properties，修改server.port=自己想要的端口</span><br>vim nacos/conf/application.properties<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动nacos</span><br>cd nacos/bin<br><span class="hljs-meta prompt_"># </span><span class="language-bash">单机运行</span><br>sh startup.sh -m standalone<br><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭服务器</span><br>sh shutdown.sh<br></code></pre></td></tr></table></figure>

<img src="https://niit-soft.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210714185649885.png" alt="1" style="zoom:40%;margin-left:0;" />

<p>浏览器输入：服务器 IP 地址:8848&#x2F;nacos</p>
<img src="https://niit-soft.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210714203708081.png" alt="image-20210714203708081" style="zoom:30%;margin-left:0;" />

<h2 id="9-Sentinel"><a href="#9-Sentinel" class="headerlink" title="9. Sentinel"></a>9. Sentinel</h2><blockquote>
<p>官方文档：<a href="https://sentinelguard.io/zh-cn/">https://sentinelguard.io/zh-cn/</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入 /home/tools目录</span><br>cd /home/tools<br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载最新稳定版sentinel-dashboard-1.8.2,慢的话就手动下载上传</span><br>wget https://github.com/alibaba/Sentinel/releases/download/1.8.2/sentinel-dashboard-1.8.2.jar<br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定启动端口为8088，后台启动，注意修改服务器地址</span><br>nohup java -Dserver.port=8088 -Dcsp.sentinel.dashboard.server=47.**.**.33:8088 -jar sentinel-dashboard-1.8.2.jar &amp;<br></code></pre></td></tr></table></figure>

<h2 id="10-Seata"><a href="#10-Seata" class="headerlink" title="10. Seata"></a>10. Seata</h2><p>进入 &#x2F;home&#x2F;tools 目录下载 seata，或手动上传</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">wget https://github.com/seata/seata/releases/download/v1.4.2/seata-server-1.4.2.tar.gz<br></code></pre></td></tr></table></figure>

<h2 id="11-RocketMQ"><a href="#11-RocketMQ" class="headerlink" title="11. RocketMQ"></a>11. RocketMQ</h2><p>进入 &#x2F;home&#x2F;tools 目录，依次执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git clone  https://github.com/foxiswho/docker-rocketmq.git<br>cd docker-rocketmq<br>cd rmqchmod +x<br>start.sh./start.sh<br></code></pre></td></tr></table></figure>

<p>访问浏览器：你的 IP 地址:8180</p>
]]></content>
      <categories>
        <category>环境</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>HEXO博客部署到云服务器上（傻瓜式部署）</title>
    <url>//post/HEXO%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%EF%BC%88%E5%82%BB%E7%93%9C%E5%BC%8F%E9%83%A8%E7%BD%B2%EF%BC%89.html</url>
    <content><![CDATA[<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><ul>
<li>已经搭建完毕的本地博客</li>
<li>一台 windows&#x2F;mac 电脑</li>
<li>一台云服务器（本教程以阿里云为例）</li>
<li>本地电脑安装一个 ssh 连接工具</li>
<li>有可能失败很多次但是不会放弃的决心（本博主弄了四个小时）</li>
</ul>
<p>只要按照本教程来基本上就是复制粘贴的事情，有的小细节可能需要自己注意下</p>
<h2 id="2-服务器上安装配置-git"><a href="#2-服务器上安装配置-git" class="headerlink" title="2.服务器上安装配置 git"></a>2.服务器上安装配置 git</h2><h3 id="1-安装依赖工具包"><a href="#1-安装依赖工具包" class="headerlink" title="1.安装依赖工具包"></a>1.安装依赖工具包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel<br></code></pre></td></tr></table></figure>

<h3 id="2-安装编译工具"><a href="#2-安装编译工具" class="headerlink" title="2.安装编译工具"></a>2.安装编译工具</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yum install -y gcc perl-ExtUtils-MakeMaker package<br></code></pre></td></tr></table></figure>

<h3 id="3-删除旧版本-git"><a href="#3-删除旧版本-git" class="headerlink" title="3.删除旧版本 git"></a>3.删除旧版本 git</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yum remove git -y<br></code></pre></td></tr></table></figure>

<h3 id="4-回到根目录"><a href="#4-回到根目录" class="headerlink" title="4.回到根目录"></a>4.回到根目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span><br></code></pre></td></tr></table></figure>

<h3 id="5-下载-git-到家目录"><a href="#5-下载-git-到家目录" class="headerlink" title="5.下载 git 到家目录"></a>5.下载 git 到家目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">wget https://www.kernel.org/pub/software/scm/git/git-2.34.0.tar.gz --no-check-certificate<br></code></pre></td></tr></table></figure>

<p>如果提示没有 wget 命令，先安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yum install wget -y<br></code></pre></td></tr></table></figure>

<h3 id="6-解压文件"><a href="#6-解压文件" class="headerlink" title="6.解压文件"></a>6.解压文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">tar -zxf git-2.34.0.tar.gz<br></code></pre></td></tr></table></figure>

<h3 id="7-安装-git"><a href="#7-安装-git" class="headerlink" title="7.安装 git"></a>7.安装 git</h3><p>进入到 git 目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> git-2.34.0<br></code></pre></td></tr></table></figure>

<p>编译(时间可能有点久，稍微等待一下)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">make all prefix=/usr/local/git<br></code></pre></td></tr></table></figure>

<p>安装 git 到&#x2F;usr&#x2F;local&#x2F;git 下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">make install prefix=/usr/local/git<br></code></pre></td></tr></table></figure>

<h3 id="8-配置-git-环境变量"><a href="#8-配置-git-环境变量" class="headerlink" title="8 配置 git 环境变量"></a>8 配置 git 环境变量</h3><p>将 git 加入 PATH 目录中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=$PATH:/usr/local/git/bin&#x27;</span> &gt;&gt; /etc/bashrc<br></code></pre></td></tr></table></figure>

<p>使配置生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/bashrc<br></code></pre></td></tr></table></figure>

<p>查看 git 版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git --version<br></code></pre></td></tr></table></figure>

<h2 id="3-创建用户配置-SSH"><a href="#3-创建用户配置-SSH" class="headerlink" title="3.创建用户配置 SSH"></a>3.创建用户配置 SSH</h2><h3 id="1-创建用户并设置密码"><a href="#1-创建用户并设置密码" class="headerlink" title="1 创建用户并设置密码"></a>1 创建用户并设置密码</h3><p>这里的 username 改成你自己的用户名，并且为用户设置一个密码。</p>
<p>例如:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">adduser git<br>passwd  a1234567<br></code></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13704/1b6789f8ccab4e8fa037de942449cff5.png" alt="在这里插入图片描述"></p>
<p>这里密码设置的太简单了，所以就会有提示信息，但是不用管他</p>
<h3 id="2-为用户分配权限"><a href="#2-为用户分配权限" class="headerlink" title="2 为用户分配权限"></a>2 为用户分配权限</h3><p>把用户添加到 wheel 组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">usermod [username] -G wheel<br></code></pre></td></tr></table></figure>

<h3 id="3-本地创建密钥"><a href="#3-本地创建密钥" class="headerlink" title="3 本地创建密钥"></a>3 本地创建密钥</h3><p>在本机电脑终端输入(cmd)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa<br></code></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13704/image-20221205203823615.png" alt="image-20221205203823615"></p>
<p>第一次回车后输入 y 后面就是一直回车了，新建一个密钥，<strong>注意如果之前你将你的本地 hexo 博客部署到 GitHub 的时候生成的那个密钥是不可用的一定要重新生成这个密钥，不然上传的时候就会出错</strong>。</p>
<p>一般来说在你创建的时候命令行会提示你密钥文件的路径，windows 电脑一般是 C:\Users\Administrator.ssh</p>
<p>复制 id_rsa.pub 文件中的内容备用。</p>
<h3 id="4-配置公钥"><a href="#4-配置公钥" class="headerlink" title="4 配置公钥"></a>4 配置公钥</h3><p>回到服务器终端，切换用户</p>
<p>username 就是你刚刚添加的用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">su - [username]<br></code></pre></td></tr></table></figure>

<p>创建.ssh 文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> .ssh<br></code></pre></td></tr></table></figure>

<p>新建 authorized_keys</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">vim .ssh/authorized_keys<br></code></pre></td></tr></table></figure>

<p>如果提示没有 vim，则先安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo yum install -y vim<br></code></pre></td></tr></table></figure>

<p>将刚刚 id_rsa.pub 公钥中的内容，复制粘贴到文件里，保存退出。（注意这里是输入 i 编辑，esc 退出编辑模式，:wq 保存）</p>
<h2 id="4-git-仓库配置"><a href="#4-git-仓库配置" class="headerlink" title="4 git 仓库配置"></a>4 git 仓库配置</h2><p>退出用户登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure>

<p>此时应该是 root 用户，创建 git 目录，并修改目录的所有权和用户权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /home/git/<br><span class="hljs-built_in">chown</span> -R [username]:[username] /home/git/<br><span class="hljs-built_in">chmod</span> -R 755 /home/git/<br></code></pre></td></tr></table></figure>

<p>进入目录，建立 git 仓库，修改权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/git/<br>git init --bare blog.git<br><span class="hljs-built_in">chown</span> [username]:[username] -R blog.git<br></code></pre></td></tr></table></figure>

<p>新建钩子文件 post-receive</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">vim /home/git/blog.git/hooks/post-receive<br></code></pre></td></tr></table></figure>

<p>进入文本编辑器，粘贴下面两行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>git --work-tree=/home/blog --git-dir=/home/git/blog.git checkout -f<br></code></pre></td></tr></table></figure>

<p>保存退出。然后修改文件权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x /home/git/blog.git/hooks/post-receive<br></code></pre></td></tr></table></figure>

<h2 id="5-nginx-配置"><a href="#5-nginx-配置" class="headerlink" title="5 nginx 配置"></a>5 nginx 配置</h2><p>首先创建 blog 目录用户 nginx 转发</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /home/blog/<br><span class="hljs-built_in">chown</span> -R [username]:[username] /home/blog/<br><span class="hljs-built_in">chmod</span> -R 755 /home/blog/<br></code></pre></td></tr></table></figure>

<h3 id="1-第一种方法安装-nginx"><a href="#1-第一种方法安装-nginx" class="headerlink" title="1 第一种方法安装 nginx"></a>1 第一种方法安装 nginx</h3><p>两种方法任选其一，如果 yum 安装成功就不用第二种。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yum install -y nginx<br></code></pre></td></tr></table></figure>

<p>启动 nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">systemctl start nginx.service<br></code></pre></td></tr></table></figure>

<p>查看 nginx 服务状态，绿色的 active 说明启动成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">systemctl status nginx.service<br></code></pre></td></tr></table></figure>

<h3 id="2-第二种方法安装-nginx"><a href="#2-第二种方法安装-nginx" class="headerlink" title="2 第二种方法安装 nginx"></a>2 第二种方法安装 nginx</h3><p>针对 yum 无法安装的情况，这里介绍第二种方法，源码安装。</p>
<p>回到家目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span><br></code></pre></td></tr></table></figure>

<p>下载安装包，鉴于下载地址的时效性，附上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">wget http://nginx.org/download/nginx-1.21.4.tar.gz<br></code></pre></td></tr></table></figure>

<p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">tar -zxf nginx-1.21.4.tar.gz<br></code></pre></td></tr></table></figure>

<p>进入目录，编译安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> nginx-1.21.4<br>./configure<br>make install prefix=/usr/local/nginx<br></code></pre></td></tr></table></figure>

<p>配置 nginx 环境变量，并使环境变量生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=$PATH:/usr/local/nginx/sbin&#x27;</span> &gt;&gt; /etc/bashrc<br><span class="hljs-built_in">source</span> /etc/bashrc<br></code></pre></td></tr></table></figure>

<p>查看 nginx 版本号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">nginx -v<br></code></pre></td></tr></table></figure>

<p>配置 Systemd 服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">vim /lib/systemd/system/nginx.service<br></code></pre></td></tr></table></figure>

<p>在文本编辑器中粘贴以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[Unit]<br>Description=nginx<br>After=network.target<br><br>[Service]<br>Type=forking<br>ExecStart=/usr/local/nginx/sbin/nginx<br>ExecReload=/usr/local/nginx/sbin/nginx -s reload<br>ExecStop=/usr/local/nginx/sbin/nginx -s quit<br>PrivateTmp= <span class="hljs-literal">true</span><br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure>

<p>内容说明：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[Unit]:服务的说明<br>Description:描述服务<br>After:描述服务类别<br>[Service]服务运行参数的设置<br>Type=forking是后台运行的形式<br>ExecStart为服务的具体运行命令<br>ExecReload为重启命令<br>ExecStop为停止命令<br>PrivateTmp=True表示给服务分配独立的临时空间<br>注意：[Service]的启动、重启、停止命令全部要求使用绝对路径<br>[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3<br></code></pre></td></tr></table></figure>

<p>设置开机自启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> nginx.service<br></code></pre></td></tr></table></figure>

<p>重启电脑</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">reboot<br></code></pre></td></tr></table></figure>

<p>重启后，查看 nginx 服务状态，绿色的 active 说明启动成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">systemctl status nginx.service<br></code></pre></td></tr></table></figure>

<h3 id="3-修改-nginx-转发配置"><a href="#3-修改-nginx-转发配置" class="headerlink" title="3 修改 nginx 转发配置"></a>3 修改 nginx 转发配置</h3><p>在浏览器中输入服务器公网 ip 地址，测试是否能打开。</p>
<p>查看 nginx 的默认配置文件的安装位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">nginx -t<br></code></pre></td></tr></table></figure>

<p>修改 nginx 的默认配置，其中 cd 后边就是刚刚查到的安装位置，每个人可能都不一样，我这里是&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">vim /usr/local/nginx/conf/nginx.conf<br></code></pre></td></tr></table></figure>

<p>在文本编辑器中找到如下位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">server &#123;<br>    listen 80 default_server;<br>    listen [::]:80 default_server;<br>    root /home/blog;    <span class="hljs-comment"># 修改为创建的blog目录地址</span><br>    server_name www.example.com; <span class="hljs-comment"># 需要修改为你的域名（或者公网ip）</span><br><br>    <span class="hljs-comment"># Load configuration files for the default server block.</span><br>    include /etc/nginx/default.d/*.conf;<br>    location / &#123;<br>    &#125;<br>    error_page 404 /404.html;<br>        location = /40x.html &#123;<br>    &#125;<br></code></pre></td></tr></table></figure>

<p>保存退出。重启 nginx 服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">systemctl restart nginx.service<br></code></pre></td></tr></table></figure>

<h2 id="6-在-hexo-站点配置文件中配置"><a href="#6-在-hexo-站点配置文件中配置" class="headerlink" title="6 在 hexo 站点配置文件中配置"></a>6 在 hexo 站点配置文件中配置</h2><p>打开你本地的 hexo 博客所在文件，打开站点配置文件_config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> [<span class="hljs-string">username</span>]<span class="hljs-string">@100.0.0.100:/home/git/blog.git</span>   <span class="hljs-comment">#用户名@服务器Ip:git仓库位置</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure>

<p>在本地 hexo 博客根目录下，打开终端，部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure>

<p>如果提示 ERROR Deployer not found:git 错误，先安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure>

<p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13704/image-20221205211240381.png" alt="image-20221205211240381"></p>
<p>出现这个问题，删除 known_hosts 文件，可能是之前生成过，输入然后输入会让你输入密码，就是你的 git 用户密码</p>
<p>位置：C:\Users\Administrator.ssh</p>
<p>打开浏览器输入你的服务器公网 ip，应该已经部署成功了。</p>
]]></content>
      <categories>
        <category>实用技能</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>云服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>阶段1：JavaSE</title>
    <url>//post/%E9%98%B6%E6%AE%B51%EF%BC%9AJavaSE.html</url>
    <content><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ol>
<li>能打字的笔记本<br>推荐网站 - 菜鸟工具：<a href="https://c.runoob.com/compile/10">https://c.runoob.com/compile/10</a></li>
<li>记笔记的软件，比如看的视频中老师的思路、自己遇到的问题、解决问题的方法、感悟、看到的好资料。好记性不如烂笔头，有自己的博客也是日后求职的加分项。</li>
</ol>
<ul>
<li>推荐软件 Typora：<a href="https://www.typora.io/">https://www.typora.io/</a></li>
<li>推荐使用 Markdown 语法编写</li>
</ul>
<ol start="3">
<li>想学好编程，无它，唯手熟尔！</li>
<li>看视频和找资料的tip：多看评论区，评论区都有干货的说明是好资源，而不是水军</li>
</ol>
<h1 id="基础（2-个月）"><a href="#基础（2-个月）" class="headerlink" title="基础（2 个月）"></a>基础（2 个月）</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul>
<li>开发环境搭建</li>
<li>数据类型</li>
<li>数组</li>
<li>OOP 三大特性</li>
<li>抽象类、接口</li>
<li>枚举、String、集合类</li>
<li>泛型</li>
<li>注解</li>
<li>异常体系</li>
<li>多线程</li>
<li>I&#x2F;O 流</li>
<li>反射</li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li>视频<ul>
<li>⭐ 韩顺平 - 零基础 30 天学会 Java：<a href="https://www.bilibili.com/video/BV1fh411y7R8">https://www.bilibili.com/video/BV1fh411y7R8</a>（目录合理，讲解通俗、有实战）</li>
</ul>
</li>
<li>文档<ul>
<li>⭐ 菜鸟教程：<a href="https://www.runoob.com/java/java-tutorial.html">https://www.runoob.com/java/java-tutorial.html</a>（可以在线练习）</li>
<li>廖雪峰 Java 教程：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744">https://www.liaoxuefeng.com/wiki/1252599548343744</a></li>
</ul>
</li>
<li>书籍<ul>
<li>《Java 核心技术卷一》</li>
</ul>
</li>
</ul>
<h1 id="Java-8（一周）"><a href="#Java-8（一周）" class="headerlink" title="Java 8（一周）"></a>Java 8（一周）</h1><h2 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h2><ul>
<li>Stream流式编程</li>
<li>Lambda 表达式</li>
<li>Java8日期时间 API</li>
<li>接口default方法</li>
</ul>
<h2 id="资源-1"><a href="#资源-1" class="headerlink" title="资源"></a>资源</h2><ul>
<li>视频<ul>
<li>⭐ 宋红康 - 全网最全Java零基础入门教程：<a href="https://www.bilibili.com/video/BV1Kb411W75N">https://www.bilibili.com/video/BV1Kb411W75N</a>（只看 Java 8 部分即可）</li>
</ul>
</li>
<li>文档<ul>
<li>⭐ 菜鸟教程：<a href="https://www.runoob.com/java/java8-new-features.html">https://www.runoob.com/java/java8-new-features.html</a></li>
</ul>
</li>
<li>书籍<ul>
<li>《Java 8 实战 第二版》</li>
</ul>
</li>
<li>工具<ul>
<li>⭐ 在线编写运行 Java 8：<a href="https://www.tutorialspoint.com/compile_java8_online.php">https://www.tutorialspoint.com/compile_java8_online.php</a></li>
</ul>
</li>
<li>项目<ul>
<li>Java 8 小代码片段：<a href="https://github.com/biezhi/30-seconds-of-java8">https://github.com/biezhi/30-seconds-of-java8</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java全栈学习路线</category>
      </categories>
      <tags>
        <tag>Java全栈学习路线</tag>
      </tags>
  </entry>
  <entry>
    <title>京东探索研究院 | 2023 年十大科技趋势</title>
    <url>//post/%E4%BA%AC%E4%B8%9C%E6%8E%A2%E7%B4%A2%E7%A0%94%E7%A9%B6%E9%99%A2%20%7C%202023%20%E5%B9%B4%E5%8D%81%E5%A4%A7%E7%A7%91%E6%8A%80%E8%B6%8B%E5%8A%BF.html</url>
    <content><![CDATA[<p>日迈月征，朝暮轮转。这一年里，科技开拓者们，产业同行者们用科技汇聚向上的力量步入了数智时代的 “星辰大海”。数字化是我们创造出来的一个永恒并且充满活力的装置，数智技术正在以前所未有的速度发展，并引发颠覆式的变革。</p>
<p>低延迟、高通路的网络通信技术加速现代人类的 “千里传音”；产业 AI、泛在应用助力人类 “身临其境” 畅游虚拟世界；人工智能生成内容 AIGC，让人工智能如同手握画笔，在一幅幅画卷上 “妙笔生花”……</p>
<p>京东探索研究院结合近年来咨询公司、学术界和产业界的热点研究方向，发布了 2023 十大科技趋势，包括了自动化工具、产业 AI、计算机通信、基础科学等领域。</p>
<p>在这份报告中，我们详细分析了十大科技趋势的关键要素，并按照其商业价值和技术栈层级，绘制了科技趋势全景图。技术的组合效应将放大并加速新的商业模式和创新，通过颠覆现状和创造新的机会来改变行业格局。</p>
<p><img src="https://pic2.zhimg.com/80/v2-9a78d359cbf7694028480e0e0a6f3d19_1440w.webp"></p>
<h2 id="一、低延迟、高通路的网络通信技术"><a href="#一、低延迟、高通路的网络通信技术" class="headerlink" title="一、低延迟、高通路的网络通信技术"></a>一、低延迟、高通路的网络通信技术</h2><p>低延时、高通路的网络通信技术是指能够减少现有网络的限制及通信的延迟，通过使用人工智能、边缘设备、基站上的加速器来处理运算负载，从而提供超低延迟、高连接密度和网络切片的独立网络，并促进基于互联网的生态系统的一种即时通信技术。</p>
<p><img src="https://pic1.zhimg.com/80/v2-8f10635246c73cb9c2e3a65335e0aacc_1440w.webp"></p>
<p>未来趋势：</p>
<ul>
<li>高低轨卫星联合组网，单星与星座互补是发展趋势</li>
<li>低延时高通路的网络通信为用户提供沉浸式娱乐、生活体验，加速 XR 设备在消费端的应用</li>
<li>卫星通信与 5G 兼容方面的前期探索，为 6G 有机融合高中低轨卫星通信与地面移动通信发展打下坚实基础</li>
</ul>
<h2 id="二、下一代计算"><a href="#二、下一代计算" class="headerlink" title="二、下一代计算"></a>二、下一代计算</h2><p>下一代计算是以量子计算、专用集成芯片、硅基光电芯片等技术为代表的，突破经典计算架构提供指数级算力增长的软硬件能力集合。</p>
<p><img src="https://pic2.zhimg.com/80/v2-59d1fe11f05fc03dee2f65a6259fd4d5_1440w.webp"></p>
<p>未来趋势：</p>
<ol>
<li>立法与标准化是未来五年重点</li>
<li>科技企业更加重视量子伙伴关系的建立和巩固</li>
<li>“量子服务”新型服务机构将会出现</li>
<li>神经形态计算的创新架构方法将为发展自主人工智能提供动力</li>
</ol>
<h2 id="三、可信任科技"><a href="#三、可信任科技" class="headerlink" title="三、可信任科技"></a>三、可信任科技</h2><p>可信任科技旨在制定保障措施、增强隐私计算、构建可信任平台、管理工程风险，从而获得内外部利益相关者的信任的系统。</p>
<p><img src="https://pic1.zhimg.com/80/v2-22dfc8e5a0bcf58648d49b11228306f0_1440w.webp"></p>
<p>未来趋势：</p>
<ol>
<li>新的数据分享技术有望保留隐私的面纱，催生新的商业模式和产品</li>
<li>数字主权将减少网络安全&#x2F;软件等领域的信任风险，为新的 CX、EX 和远程运营工作提供一个基础</li>
<li>人工智能技术作为基础，将助力零售业，提升供应链流程以及促进医疗行业发展，提升诊断效率及精度</li>
</ol>
<h2 id="四、绿色-清洁-可持续科技"><a href="#四、绿色-清洁-可持续科技" class="headerlink" title="四、绿色 清洁 可持续科技"></a>四、绿色 清洁 可持续科技</h2><p>绿色、清洁、可持续科技旨在从清洁技术、人工智能和商业模式角度出发，满足对环境、可持续发展和治理目标的需求。</p>
<p><img src="https://pic3.zhimg.com/80/v2-b2427c098acd72c4da3bfe342a188576_1440w.webp"></p>
<p>未来趋势：</p>
<ol>
<li>数字化向可持续方向变化</li>
<li>人工智能将支持能源系统的自动化</li>
<li>云通信数据中心设施供应商正在增加可再生能源的消耗，并承诺实现碳中和运营。</li>
</ol>
<h2 id="五、超自动化"><a href="#五、超自动化" class="headerlink" title="五、超自动化"></a>五、超自动化</h2><p>超自动化是一种业务驱动的方法，用于识别、审查和自动化尽可能多的业务流程、IT 流程和算法流程等。它需要协调使用多种技术工具和平台，包括机器人流程自动化 (RPA)、自动机器学习 (AutoML) 、人工智能工程化 (AI Engineering)、低代码平台等。</p>
<p><img src="https://pic1.zhimg.com/80/v2-a4657809dec2c1945fa98298263f4410_1440w.webp"></p>
<p>未来趋势：</p>
<ol>
<li>AI 门槛将得到降低以及实现普及化</li>
<li>AI 工程实践不断得到完善，以持续的从人工智能中提取业务价值</li>
<li>数据驱动的通用人工智能加速超自动化的实现</li>
<li>云边一体化的协调自动优化，将扩大自动化的应用范围</li>
</ol>
<h2 id="六、人工智能等技术向实体领域深度融合"><a href="#六、人工智能等技术向实体领域深度融合" class="headerlink" title="六、人工智能等技术向实体领域深度融合"></a>六、人工智能等技术向实体领域深度融合</h2><p>随着技术能力提升，先进科技正逐步地应用于实体企业的设计、制造和运营工作。</p>
<p><img src="https://pic3.zhimg.com/80/v2-aa6cad562956e1bf51fe3979407a0462_1440w.webp"></p>
<p>未来趋势：</p>
<ol>
<li>人-机-物共存的混合多智能体融合体系必然成为万物互联时代的新标准</li>
<li>与实体深度融合的技术堆栈有可能改变现有商业模式</li>
<li>工业技术栈实体化融合、多智能体群体智能的高效扩展将促进无人驾驶、智慧城市、智慧工厂的加速落地</li>
</ol>
<h2 id="七、指数级智能"><a href="#七、指数级智能" class="headerlink" title="七、指数级智能"></a>七、指数级智能</h2><p>AI 大模型拥有超大规模参数、巨量训练数据，通过模型的巨量化可以提高人工智能的通用属性，并降低人工智能的应用门槛。</p>
<p><img src="https://pic3.zhimg.com/80/v2-9bc14a2fb1d794bc94e3c0905627094a_1440w.webp"></p>
<p>未来趋势：</p>
<ol>
<li>大模型发展聚焦实现真正的多任务学习、推理与部署</li>
<li>跨模态将海量数据沉淀为海量知识，提高人工智能水平，进而提高生产力和商业价值</li>
<li>面向决策和控制的认知智能将得到发展，以全面实现面向视觉、语言等场景的通用感知智能</li>
</ol>
<h2 id="八、数实融生、泛在应用"><a href="#八、数实融生、泛在应用" class="headerlink" title="八、数实融生、泛在应用"></a>八、数实融生、泛在应用</h2><p>随着元宇宙（消费级体感设备、 XR 设备与应用）开始兴起，数字服务将打破虚实界限，深度融合数字经济与实体经济。</p>
<p><img src="https://pic3.zhimg.com/80/v2-37f14d9fe60910b51440774f054ca7aa_1440w.webp"></p>
<p>未来趋势：</p>
<ol>
<li>AR 眼镜实现内容沉浸化、交互实时化与服务泛在化</li>
<li>实时情境下的内容创作、分发、搜推能力助力售前决策、提高流量转化，重构实体零售业态</li>
<li>设计制造、运营协作和创新方式有望重塑，将推动实现元宇宙内容供应链</li>
</ol>
<h2 id="九、人工智能生成内容-AIGC"><a href="#九、人工智能生成内容-AIGC" class="headerlink" title="九、人工智能生成内容 AIGC"></a>九、人工智能生成内容 AIGC</h2><p>人工智能生成内容 AIGC 是继专业内容生成 (PGC) 和用户内容生成 (UGC) 后新兴的内容生产方式，具体指使用人工智能技术自动或辅助地生成或编辑文本、音频、视觉等数字内容，提供更加简单、高效、智能、专业的内容编辑、制作和创造技术与工具。</p>
<p><img src="https://pic3.zhimg.com/80/v2-ea14ed8ca80cc9cd7ec16f821303ad66_1440w.webp"></p>
<p>未来趋势：</p>
<ol>
<li>多模态大模型为代表的新兴人工智能技术成为了 AIGC 能力升级的新引擎</li>
<li>AIGC 将不仅可以构建更加宏大的虚拟数字场景，同时具备了语义理解、控制、创作能力</li>
<li>AIGC 的产品类型逐渐丰富、场景应用更多元</li>
<li>AIGC 技术不断进步将促进通用人工智能发展</li>
</ol>
<h2 id="十、AI-for-Science-基础科学加速突破"><a href="#十、AI-for-Science-基础科学加速突破" class="headerlink" title="十、AI for Science 基础科学加速突破"></a>十、AI for Science 基础科学加速突破</h2><p>下一代算力和人工智能的迅速发展，使我们能够充分利用更高维度、更多模态的数据中的信息、仿真更加复杂的生、理、化过程，AI for Science 就是让人工智能利用自身强大的数据归纳和分析能力去学习科学规律和原理，得出模型来解决实际的科研问题，特别是辅助科学家在不同的假设条件下进行大量重复的验证和试错，从而大大加速科研探索的进程。</p>
<p><img src="https://pic2.zhimg.com/80/v2-6bb4e899d7e1b7d83b3789f3a4ab0471_1440w.webp"></p>
<p>未来趋势：</p>
<ol>
<li>基础设施建设预计到 2026 年完成，将打造一系列工业级的 2.0 算法，建设与新计算形态相匹配的基础设施</li>
<li>人工智能在基础科学领域的广泛应用将在 2030 年得到实现，系统改变工业行业研发流程，AI for Science 算法走向 3.0</li>
<li>与脑科学结合的下一代人工智能技术得以发展，将人类科学总结的先验知识更好地融入人工智能模型</li>
<li>AI for Science 扩展 AIGC 技术应用领域，增强人工智能在合成生物学、分子结构学、纳米材料领域的预测能力</li>
</ol>
<p>2023 年见证科技向善之力指引我们一路繁花相送、过青墩。</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>趋势</tag>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员们的日常是怎样的</title>
    <url>//post/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BB%AC%E7%9A%84%E6%97%A5%E5%B8%B8%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84.html</url>
    <content><![CDATA[<h2 id="技术相关的岗位"><a href="#技术相关的岗位" class="headerlink" title="技术相关的岗位"></a>技术相关的岗位</h2><p><img src="https://mqxu-upload.oss-cn-hangzhou.aliyuncs.com/md/iShot_2023-01-25_19.40.31.png"></p>
<p>我们来说一下互联网行业的技术岗。</p>
<p>现在几乎所有的软件都已经互联网化了，就算没有互联网化的，它以后也会互联网化，所以我们就不单纯地去说软件开发这个行业了。</p>
<h3 id="开发岗"><a href="#开发岗" class="headerlink" title="开发岗"></a>开发岗</h3><p>首先就是开发岗，这个就包括了，前端开发、后端开发和移动开发。</p>
<p>前端开发和后端开发，主要是 B&#x2F;S 结构里的。B&#x2F;S 结构就是 Browser-Server 结构。而前端指的就是浏览器这个端；后端指的就是服务器这个端。</p>
<h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><p>前端主要做的事情，就是把从服务器端读取到的数据展现给用户，然后通过各种 UI 控件和用户互动，再将新的数据送回服务器端。具体的技术包括 HTML、CSS、JavaScript，还可能有一些嵌入浏览器运行的组件，比如 Flash 、 WebGL 。</p>
<h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><p>后端则主要送数据给前端，一般有两种方式，以前用的比较多的是，将数据在服务器端先渲染完，然后将输出的结果发送给前端；现在用的比较多的方式是将纯数据通过 Json 或者 xml 等格式发送给前端，在浏览器中通过 JS 来进行渲染。</p>
<p>所以以前很多后端的工程师往往也懂一些前端的知识，比如我认识的很多 PHP 程序员，他们不但懂 MySQL 和 Apache，还懂 HTML 、 CSS 、 JS 和 PS。这种前后端都懂的工程师，也叫全栈工程师。</p>
<p>后端可以用各种语言开发，国内用的比较多的包括 Java、PHP ，还有相对小众一些的 Python 、 Ruby 、 Go。其实 C 也是可以写后端的，不过现在已经很少有公司直接用它写了。</p>
<p>后来有了 NodeJS ，JavaScript 也能跑到后端了，所以很多前端工程师也有了后端开发的能力，他们也占了全栈工程师的很大一部分。</p>
<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>相对于 B&#x2F;S 结构，还有 C&#x2F;S 结构，就是 Client-Server 。C&#x2F;S 结构下不用浏览器来展现数据和交互，而是用客户端，一般是 Mac&#x2F;Win&#x2F;Linux 三大平台。</p>
<h4 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h4><p>手机大潮起来以后，不管是 B&#x2F;S 结构还是 C&#x2F;S 结构，全部移动化了。B&#x2F;S 结构对应的就是适配手机浏览器的移动网页、以及嵌入在微信、微博里边的 H5 页面; C&#x2F;S 结构就是 APP ，一般覆盖 iOS 和 Android 两个主流平台。</p>
<p>除了这些标准开发岗，而还有一些新兴或者相对小众的开发方向，比如人工智能&#x2F;算法工程师、做智能硬件的硬件开发工程师、给企业做解决方案的企业软件工程师。</p>
<h3 id="其他岗位"><a href="#其他岗位" class="headerlink" title="其他岗位"></a>其他岗位</h3><p>软件并不是开发出来就完了的，在上线或者发布之前，我们还需要「测试工程师」来进行测试；而上线以后，还需要「运维工程师」来管理和优化服务器集群。现在服务器都虚拟化和容器化了，运维工程师中也出现了懂开发的分支，叫做 DevOps。</p>
<h3 id="中高级岗位"><a href="#中高级岗位" class="headerlink" title="中高级岗位"></a>中高级岗位</h3><p>不管是开发岗还是测试、运维岗，都有其对应的中高级岗位。开发一般是技术经理；运维一般是架构师；测试一般是测试总监。技术总监、CTO 就是更高一级的职位了。</p>
<p>以上的职位分类我们参考了招聘网站的分类，不一定准确，可能会有很多岗位没覆盖到，不少公司也会有自己独特的岗位设置。</p>
<h2 id="程序员访谈"><a href="#程序员访谈" class="headerlink" title="程序员访谈"></a>程序员访谈</h2><h3 id="访谈一·后端工程师的日常（Java-x2F-北京-x2F-D-轮知名创业公司）"><a href="#访谈一·后端工程师的日常（Java-x2F-北京-x2F-D-轮知名创业公司）" class="headerlink" title="访谈一·后端工程师的日常（Java&#x2F;北京&#x2F;D 轮知名创业公司）"></a>访谈一·后端工程师的日常（Java&#x2F;北京&#x2F;D 轮知名创业公司）</h3><p>受访人</p>
<blockquote>
<p>ScienJus ，今年 23 岁，北京土著，后端产品研发工程师。</p>
</blockquote>
<p><strong>平时每天的上班时间和下班时间分别是？</strong></p>
<p>前公司一般是 11 点上班，现在是 10 点，下班时间我一般工作外也会待在公司做些别的，大概平均也得 9、10 点吧。</p>
<p><strong>最近一周有加班么？加班的天数是？一般加到多晚？</strong></p>
<p>属于比较忙的组，之前一直封闭开发，差不多 11、10、6 吧（也就持续一两周）。</p>
<p><strong>能否按小时描述一下你的「典型的一天」？</strong></p>
<p>一般来说是：</p>
<ul>
<li>9:00 起床</li>
<li>10:00 打车到公司</li>
<li>上午主要是整理性质，会开站会，整理下今天要做的事（不光工作，翻翻邮件、订阅的博客、Github 之类的）</li>
<li>12:00 在食堂吃饭，然后出去散散步，没有午睡的习惯</li>
<li>下午基本都在工作</li>
<li>7:00 在食堂吃晚饭</li>
<li>之后如果工作还比较忙就接着弄工作，否则会按照优先级选一些个人的事去做 (Side Project、 知识积累、阅读）</li>
<li>9:00~10:00 下班回家。到家基本上就只是放松了，看看日剧、追番</li>
<li>偶尔有很感兴趣的事驱动的时候（比如 Side Project 灵感很多的时候），会熬夜做，大概到 3:00 为底线</li>
</ul>
<p><strong>在上边描述的日常中，你最想吐槽的是什么？</strong></p>
<blockquote>
<p>目前在新公司还有两个比较严重的问题：<br>对任务的估时准确度不高，很多时候要么过忙，要么被严重 Block。<br>对任务的优先级分配有问题，我希望能静下心做一些重要且不紧急的事情，但是实际上大部分时间都在帮别人解决一些小问题。</p>
</blockquote>
<p><strong>在上边描述的日常中，你最满意的是什么？</strong></p>
<p>上家公司是技术很好的小团队（ 好到什么程度呢？后端 + 平台 15 人左右，能维护一套微服务，并且自研容器编排 ），但是很遗憾的是业务本身没有太大量级，对后端来说历练还太小。</p>
<p>来新公司主要是为了技术挑战，业务上的压力肯定是有的，就看自己能不能抓住机会了。</p>
<p><strong>在现在这个职位上，你遇到的最大的技术挑战是什么？怎么解决的？</strong></p>
<p>技术挑战可能不会太多，我认为很多业务场景都是有取巧的解决方案的（取巧可能形容有误，非贬义，类似于分库分表即使不需要太多技术也可以 Hard Coding 实现，并且能有效解决问题）。而中小型公司的平台方案一般又都是追随开源的，所以我也选择尽量追随开源社区。</p>
<p><strong>在现在这个职位上，你遇到的最大的非技术挑战是什么？怎么解决的？</strong></p>
<p>我比较不擅长编程以外的任何事，最不擅长的就是与人相处。讨厌漫长的会议，讨厌一些混日子的同事。</p>
<p><strong>你是怎么度过从新人到熟手的阶段的？公司有安排培训么？如果有，你觉得其中对你最有用的内容是什么？</strong></p>
<p>呆的都是中小型公司，没参与过什么培训，个人感觉比较幸运的主要还是多逛开源社区吧，很多时候公司交给我去做的事都是因为我之前有过了解（哪怕只是简单了解，也比大部分人强很多），这样慢慢的就能成为良性循环。</p>
<p><strong>你对即将入职这个岗位的新人，有什么建议？（做什么、不要做什么）</strong></p>
<p>不要盲目崇拜自己公司的技术，很多时候技术会因为架构师的喜好、成本、甚至一些和技术无关的因素而决定。即使去用了，也要明白这些技术有哪些优点、哪些缺点、如何改进。这样你至少迈出了第一步：不会因为最开始运气不好去了一家不好的公司或是部门而陷入技术上的恶性循环。</p>
<p>其次就是无论前端也好、后端也好，多去了解了解新技术，即使作为一个后端我也会偶尔和 Android 同事聊聊 Kotlin，和前端同事聊聊 React、Vue，你会发现只需花费非常低的成本就能学到一门可以弥补你短板的新技术，让你之前很多看似做不到的想法都可以轻松实现。</p>
<p><strong>你在这些年的工作中，有没有遇到特别好的工具、资料、书籍之类，想要推荐给大家？一两样也行哦。</strong></p>
<p>如果买了 Mac，一定要好好用，先装上 iTerm、Zsh、Homebrew，在适当买一些付费软件，比如 GTD 工具、笔记工具等。我有一个习惯就是喜欢通过看一个人的开发环境来评估他的技术水平，因为如果一个经常敲代码、对工作效率有追求的人，一定会尝试用软件改善自己的开发环境。</p>
<h3 id="访谈二·前端工程师的日常（前端-x2F-北京-x2F-人工智能创业公司）"><a href="#访谈二·前端工程师的日常（前端-x2F-北京-x2F-人工智能创业公司）" class="headerlink" title="访谈二·前端工程师的日常（前端&#x2F;北京&#x2F;人工智能创业公司）"></a>访谈二·前端工程师的日常（前端&#x2F;北京&#x2F;人工智能创业公司）</h3><p>受访人</p>
<blockquote>
<p>梁杰，24 岁，在北京一家做人工智能平台的创业公司工作。</p>
</blockquote>
<p><strong>平时每天的上班时间和下班时间分别是？</strong></p>
<p>9 点上班，18 点下班</p>
<p>**最近一周有加班么？加班的天数是？一般加到多晚？</p>
<p>因为是新公司，业务压力还没有那么大，所以目前没有加班。</p>
<p><strong>能否按小时描述一下你的「典型的一天」？</strong></p>
<ul>
<li>7 点起床，</li>
<li>7 点半出门（再晚五号线就上不去了），</li>
<li>9 点到公司开始工作，</li>
<li>11 点半吃午饭，</li>
<li>14 点继续工作到 18 点下班，</li>
<li>19 点半左右到家。</li>
<li>偶尔下午会开会，不过时间不会太长，一般在半个小时以内</li>
</ul>
<p><strong>在上边描述的日常中，你最想吐槽的是什么？</strong></p>
<p>毫无疑问是交通。北京的五号线人实在太多了，几乎从 7 点到 10 点都是高峰期，挤得要死，到公司之后心情很差。如果遇上雾霾天，会更难受</p>
<p><strong>在上边描述的日常中，你最满意的是什么？</strong></p>
<p>公司氛围不错，创业公司没有那么多乱七八糟的内耗，大家都能专心在工作上，老板也很亲切。另外技术上没太多限制，可以用自己喜欢的东西，只要完成目标。</p>
<p><strong>在现在这个职位上，你遇到的最大的技术挑战是什么？怎么解决的？</strong></p>
<p>最大的技术挑战就是重复性的工作太多，只是不断使用已经熟练的技术，没有压力也没有太多动力尝试新东西。我能想到的解决方法就是多看书，先在理论上学会新东西，然后再找机会用在新项目中。当然，很可能没有实际使用的机会，但是学了总比不学强。</p>
<p><strong>在现在这个职位上，你遇到的最大的非技术挑战是什么？怎么解决的？</strong></p>
<p>最大的非技术挑战是沟通。虽然创业公司人数不多，但是有同事是远程工作，所以很多问题需要在线上沟通，感觉效率偏低，没有那么顺畅。解决方法其实也没啥，就是适应，尽量在一次沟通中把问题描述清楚，把自己需要对方处理的地方明确出来，减少整体的沟通次数。</p>
<p><strong>你是怎么度过从新人到熟手的阶段的？公司有安排培训么？如果有，你觉得其中对你最有用的内容是什么？</strong></p>
<p>公司没有安排培训。我过渡的方式就是多写代码，这可能是最简单也是最实用的方式。刚开始写前端的时候什么都不懂，我就自己跟着教程写网站，不断添加功能。在这个阶段你会遇到很多很多问题，这很正常，卡住了就去搜解决方案，解决问题的过程就是成长的过程。做完一个项目之后，可以再做一两个去巩固技术，心里有底之后再做东西就不害怕了。</p>
<p><strong>你对即将入职这个岗位的新人，有什么建议？（做什么、不要做什么）</strong><br>多写代码，大部分工作内容其实没太多技术含量，唯手熟尔；多读书，读好书，读英文原版书；多参加活动，开拓眼界，也多认识一些朋友，找工作时候内推永远比投简历靠谱。少抱怨，单纯的抱怨并不能解决问题，同事和老板不是你爸妈，没义务开导你，如果你确实遇到了问题，更好的方式是尝试找出解决方案并反馈给老板。少做低效的事，能看书就别看文章，能看文章就别看视频，能自己搜问题就别问人，能打字就别发语音，能不废话就不废话（你看这条我自己都没做到）</p>
<p><strong>你在这些年的工作中，有没有遇到特别好的工具、资料、书籍之类，想要推荐给大家？一两样也行哦。</strong><br>技术角度，推荐几本书：</p>
<ul>
<li>《You Don’t Know JS》系列书，GitHub 上有作者开放的免费版可以看；</li>
<li>《Speaking JavaScript》从实现原理角度讲解 JS，进阶必备；</li>
<li>《精通 CSS（第二版）》名字很俗但是一本入门好书；</li>
<li>《CSS Secrets》CSS 进阶书籍，让你看看 CSS 到底有多少种用法。</li>
</ul>
<p>另外，我个人不推荐犀牛书和高级程序设计，或许在当年这两本算是 JS 圣经，但现在已经有了很多更好的书，比如我推荐的那两本，所以如果你相信我，就不要再看犀牛和高程了。</p>
<p>非技术角度，能推荐的就太多了，只推荐三个吧：</p>
<p>第一个是吴军博士写的所有书，通俗易懂，看完之后会对整个计算机行业和计算机发展历史有一个宏观的了解；<br>第二个是《Algorithms to Live By: The Computer Science of Human Decisions》，这本书讲了很多算法在日常生活中的应用，能帮助你开拓眼界，非常有趣；<br>第三个是 Easy 之前写的《程序员跳槽全攻略》，不讨论观点对错，这本书的重点是提出了许多新想法，能帮你从不同角度分析跳槽这件事，读完会有很多启发。</p>
<h3 id="访谈三·客户端工程师的日常（iOS-x2F-上海-x2F-日企）"><a href="#访谈三·客户端工程师的日常（iOS-x2F-上海-x2F-日企）" class="headerlink" title="访谈三·客户端工程师的日常（iOS&#x2F;上海&#x2F;日企）"></a>访谈三·客户端工程师的日常（iOS&#x2F;上海&#x2F;日企）</h3><p>受访人</p>
<blockquote>
<p>udspj，30 岁，在上海一家日企工作。</p>
</blockquote>
<p><strong>平时每天的上班时间和下班时间分别是</strong>？</p>
<p>9:00-18:00 和 10:30-19:30 之间弹性，去掉中午 1 小时，满 8 小时即可。</p>
<p><strong>最近一周有加班么？加班的天数是？一般加到多晚？</strong></p>
<p>最近一周都没有加班，平时加班也不多，唯一一次连续一周包括周末每天加班是因为同事把项目搞砸了，在紧急帮他修一堆 bug。</p>
<p><strong>能否按小时描述一下你的「典型的一天」？</strong></p>
<ul>
<li>早上 8 点闹铃，</li>
<li>9 点前出门，</li>
<li>9 点半到公司，</li>
<li>上午时间基本都做些零碎的事情比如修 bug、开小会、和同事讨论项目问题等，</li>
<li>12 点－13 点吃午饭，</li>
<li>下午开始干正事专心写代码，</li>
<li>晚上 6 点半准时下班。</li>
</ul>
<p><strong>在上边描述的日常中，你最想吐槽的是什么？</strong></p>
<p>似乎没啥特别的槽点，除了，日常工作大多只能做 iOS 开发，没有其他方面的技术工作可以给我做。</p>
<p><strong>在上边描述的日常中，你最满意的是什么？</strong></p>
<p>在不加班的情况下薪水算还不错的了；公司氛围轻松没有政治斗争；可以有机会练习日语口语。</p>
<p><strong>在现在这个职位上，你遇到的最大的技术挑战是什么？怎么解决的？</strong></p>
<p>由于是日企，日本人在手工测试方面很严格，经常需要解决一些很细节的问题。</p>
<p><strong>在现在这个职位上，你遇到的最大的非技术挑战是什么？怎么解决的？</strong></p>
<p>「不会营销自己」这个算不算。</p>
<p><strong>你是怎么度过从新人到熟手的阶段的？公司有安排培训么？如果有，你觉得其中对你最有用的内容是什么？</strong></p>
<p>（在第一家公司实习时）没有培训，新人阶段是跟着开发部做页游模块，开局一人一任务，剩下全靠自学。</p>
<p><strong>你对即将入职这个岗位的新人，有什么建议？（做什么、不要做什么）</strong></p>
<p>移动端开发差不多都饱和了，如果不是特别喜欢这方面的话还是选择其他技术入行吧。</p>
<h3 id="访谈四·创业公司技术负责人的日常（PHP-x2F-深圳-x2F-创业中）"><a href="#访谈四·创业公司技术负责人的日常（PHP-x2F-深圳-x2F-创业中）" class="headerlink" title="访谈四·创业公司技术负责人的日常（PHP&#x2F;深圳&#x2F;创业中）"></a>访谈四·创业公司技术负责人的日常（PHP&#x2F;深圳&#x2F;创业中）</h3><p>受访人</p>
<blockquote>
<p>安正超，今年 27 ，5 月份离开微博到深圳已经半年，目前与几个朋友创业中，负责技术部分。</p>
</blockquote>
<p><strong>平时每天的上班时间和下班时间分别是？</strong></p>
<p>创建阶段也没有固定吧，其实也与大家都差不多。</p>
<p><strong>最近一周有加班么？加班的天数是？一般加到多晚？</strong></p>
<p>创业阶段就没有加班一说了，因为也没有固定的下班时间，有事情就多忙一会儿，晚点回家，没事就早点回去。</p>
<p><strong>能否按小时描述一下你的「典型的一天」？</strong></p>
<ul>
<li>一般是 8 点左右起床，</li>
<li>然后 9 点从坪洲站出发，</li>
<li>9 点 50 左右到水湾站，出站就是公司所在地：深圳自贸中心。</li>
<li>整体感觉还是很方便的。</li>
<li>中午楼下吃饭，</li>
<li>然后工作到 7-8 点左右回家。</li>
</ul>
<p><strong>在上边描述的日常中，你最想吐槽的是什么？</strong></p>
<p>其实相对于北京，深圳给我的印象没有太多槽点，大家都很有秩序的排队是印象最深刻的，地铁也不挤（也许是我 9 点才出发的原因吧）， 因为我住坪洲，办公室在深圳自贸中心稍微离我稍微远一点，40-50 分钟左右的地铁也许是最差的一点了吧，不过都还能接受了。</p>
<p><strong>在上边描述的日常中，你最满意的是什么？</strong></p>
<p>最满意的就是团队了，几个合伙人的执行力是我见过最棒的，然后很满意的就是公司环境很好，大家有空可以来参观一下。</p>
<p><strong>在现在这个职位上，你遇到的最大的技术挑战是什么？怎么解决的？</strong></p>
<p>由于我们是创业项目，线上线下联动，并非纯互联网项目，我们没有太多的难点需要解决，所以大部分是在接入一些服务时感觉比较麻烦一些吧，目前来讲没有遇到什么技术难题，因为不管从项目复杂度上还是用户量级上都还没有到有挑战的程度。</p>
<p><strong>在现在这个职位上，你遇到的最大的非技术挑战是什么？怎么解决的？</strong></p>
<p>作为技术负责人，除了搞定技术问题外，更多的时间都是与大家在讨论产品，用户体验，以及一些未来规划可能需要做的准备工作。另外就是需要扩大技术广度来避免团队扩大时的管理难题。目前来讲就是在时间管理上还需要一些调整，不是太能控制好个人时间。</p>
<p><strong>你是怎么度过从新人到熟手的阶段的？公司有安排培训么？如果有，你觉得其中对你最有用的内容是什么？</strong></p>
<p>其实很多的实践经验基本都来自公司项目或者自己业余项目，工作之外的时间主要就是做一些基础知识的积累。还是得感谢这几年经历的几家公司，对我的成长提升都很大，在微博的两年，领导的大力支持给了我很多帮助。然后折腾开源项目的时间也是我个人成长过程中收益最大的投入。 公司培训的话，有过，不过比较少，更多的是团队内的知识分享，这方面手机微博做得还是很棒的。其实分享不在于能让你在这么短时间内学会什么，我觉得它最大的益处就是增加知识面：你会的东西，在分享过程中可能会看到新的玩法，或者更有效的玩法，你不会的东西，增加知识广度，新东西能增加个人的学习气氛（折腾新东西的时候持续的兴奋感特别棒）。另外主动分享也能锻炼表达能力。</p>
<p><strong>你对即将入职这个岗位的新人，有什么建议？（做什么、不要做什么）</strong></p>
<p>新人最大的难点可能在选择上，这个选择包括很多方面吧，比如用什么语言（这个争吵太多了）、用什么编辑器到用什么框架、写不写注释等等，我个人的建议是：把握一个方向，找比较能入手的（像 PHP 就很容易入手），大家都在用的（或者说用得人多的）深入学习，精通它，在项目中去实践，然后扩大知识面，了解一下其它周边的东西，比如你写后端，你起码也得懂 CSS，js 之类的基础使用比较好。少看社区八卦，他们爱吵不吵，不要受影响，相信自己的选择。因为到后面你会发现，真正的牛人，不是在于哪个语言他用得 6 不 6，而是在项目上的架构能力，解决问题的能力才是最厉害的。</p>
<p><strong>你在这些年的工作中，有没有遇到特别好的工具、资料、书籍之类，想要推荐给大家？一两样也行哦。</strong></p>
<p>太多了，不过不常用的我就不提了，自己常用的东西有：</p>
<p>工具方面（全部已购买正版授权）：</p>
<p>写代码：Sublime Text 3 + PHPStorm(开源授权) 做设计：Sketch 数据库：Sequel pro 记笔记：Bear TODO：Things 3 办公：企业微信 项目管理：Teambition 其它工具：1password、Charles、Item2 等</p>
<p>书籍方面其实我不太有发言权，因为比较懒，不过还是有两本认为很棒的推荐给大家：《深入 PHP：面向对象、模式与实践（第 3 版）》、《C 和指针》系列。</p>
<h3 id="访谈五·CTO-的日常（CTO-x2F-北京-x2F-云计算创业公司）"><a href="#访谈五·CTO-的日常（CTO-x2F-北京-x2F-云计算创业公司）" class="headerlink" title="访谈五·CTO 的日常（CTO&#x2F;北京&#x2F;云计算创业公司）"></a>访谈五·CTO 的日常（CTO&#x2F;北京&#x2F;云计算创业公司）</h3><p>受访人</p>
<blockquote>
<p>董先生，39 岁，北京某云计算公司 CTO ，原知名上市公司研发总监。</p>
</blockquote>
<p><strong>平时每天的上班时间和下班时间分别是？</strong></p>
<p>早 10:30 到晚 8:30。</p>
<p><strong>最近一周有加班么？加班的天数是？一般加到多晚？</strong></p>
<p>有加班，2 天，一般加班到 9 点 30。</p>
<p><strong>能否按小时描述一下你的「典型的一天」？</strong></p>
<ul>
<li>8 点起床，</li>
<li>9 点出门，</li>
<li>10 点半到公司，处理邮件，处理和工作相关的微信，和同事讨论工作进展情况，</li>
<li>12 点吃饭，</li>
<li>12 点半看业内资讯、技术文章，</li>
<li>1 点半休息半小时，</li>
<li>2 点会议或者面试，</li>
<li>3 点会议或者面试，</li>
<li>4 点和同事或者客户沟通工作，</li>
<li>5 点看工作相关的运营数据、邮件、文档、了解各项工作的进展，</li>
<li>6 点吃饭，有时候约了饭局出发，不出去的话，</li>
<li>6 点半和同事沟通工作，</li>
<li>8 点半下班。</li>
</ul>
<p><strong>在上边描述的日常中，你最想吐槽的是什么？</strong></p>
<p>上班太远，路上总堵车。</p>
<p><strong>在上边描述的日常中，你最满意的是什么？</strong></p>
<p>发展空间大。</p>
<p><strong>在现在这个职位上，你遇到的最大的技术挑战是什么？怎么解决的？</strong></p>
<p>产品和服务的质量，体现在服务的响应速度快、稳定性好故障率底，主要通过不断改进系统的缺陷，完善技术开发和变更的流程机制。</p>
<p><strong>在现在这个职位上，你遇到的最大的非技术挑战是什么？怎么解决的？</strong></p>
<p>非技术挑战就是拓展业务，跟更多的潜在客户沟通，介绍公司的产品，争取测试的机会。</p>
<p><strong>你是怎么度过从新人到熟手的阶段的？公司有安排培训么？如果有，你觉得其中对你最有用的内容是什么？</strong></p>
<p>自己和公司的人多沟通，了解公司的人、流程、部门。</p>
<p><strong>你在这些年的工作中，有没有遇到特别好的工具、资料、书籍之类，想要推荐给大家？一两样也行哦。</strong></p>
<p>事物管理工具用 JIRA ，文档管理用 Confluence ，代码管理用 BitBucket 。</p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>程序员</tag>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>阶段2：计算机基础</title>
    <url>//post/%E9%98%B6%E6%AE%B52%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<h1 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h1><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><p><strong>数据结构</strong></p>
<ul>
<li>数组</li>
<li>字符串</li>
<li>队列</li>
<li>栈</li>
<li>链表</li>
<li>集合</li>
<li>哈希表</li>
<li>二叉树</li>
</ul>
<p><strong>算法</strong></p>
<ul>
<li>排序</li>
<li>双指针</li>
<li>查找</li>
<li>分治</li>
<li>动态规划</li>
<li>递归</li>
<li>回溯</li>
<li>贪心</li>
<li>位运算</li>
<li>DFS</li>
<li>BFS</li>
<li>图</li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li>在线教程<ul>
<li>⭐ LeetCode LeetBook：<a href="https://leetcode-cn.com/leetbook/">https://leetcode-cn.com/leetbook/</a></li>
</ul>
</li>
<li>在线刷题<ul>
<li>⭐ LeetCode：<a href="https://leetcode-cn.com/">https://leetcode-cn.com/</a></li>
</ul>
</li>
<li>书籍<ul>
<li>⭐《小灰的漫画算法》</li>
<li>⭐《剑指 Offer》</li>
<li>《程序员代码面试指南》</li>
<li>图解算法数据结构：<a href="https://leetcode-cn.com/leetbook/detail/illustration-of-algorithm/">https://leetcode-cn.com/leetbook/detail/illustration-of-algorithm/</a></li>
</ul>
</li>
<li>视频<ul>
<li>尚硅谷 Java 数据结构与算法：<a href="https://www.bilibili.com/video/BV1E4411H73v">https://www.bilibili.com/video/BV1E4411H73v</a></li>
<li>Leetcode 真题解析：<a href="https://www.bilibili.com/video/BV1a54y1b74k">https://www.bilibili.com/video/BV1a54y1b74k</a></li>
</ul>
</li>
<li>工具<ul>
<li>VisuAlgo 数据结构和算法动态可视化：<a href="https://visualgo.net/zh">https://visualgo.net/zh</a></li>
<li>数据结构可视化：<a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">https://www.cs.usfca.edu/~galles&#x2F;visualization&#x2F;Algorithms.html</a></li>
</ul>
</li>
<li>网站<ul>
<li>五分钟学算法：<a href="https://www.cxyxiaowu.com/">https://www.cxyxiaowu.com/</a></li>
</ul>
</li>
</ul>
<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="知识-1"><a href="#知识-1" class="headerlink" title="知识"></a>知识</h2><ul>
<li>进程、线程</li>
<li>进程 &#x2F; 线程间通讯方式</li>
<li>进程调度算法</li>
<li>进程 &#x2F; 线程状态</li>
<li>死锁</li>
<li>内存管理</li>
<li>文件管理</li>
</ul>
<h2 id="资源-1"><a href="#资源-1" class="headerlink" title="资源"></a>资源</h2><ul>
<li>视频<ul>
<li>《清华操作系统原理》：<a href="https://www.bilibili.com/video/BV1uW411f72n">https://www.bilibili.com/video/BV1uW411f72n</a></li>
</ul>
</li>
<li>书籍<ul>
<li>《编码》</li>
<li>《30天自制操作系统》</li>
<li>《现代操作系统》（难度较大，不推荐新手看）</li>
<li>《深入理解计算机系统》（难度较大，不推荐新手看）</li>
</ul>
</li>
</ul>
<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="知识-2"><a href="#知识-2" class="headerlink" title="知识"></a>知识</h2><ul>
<li>HTTP &#x2F; HTTPS 协议</li>
<li>网络模型</li>
<li>UDP &#x2F; TCP 协议</li>
<li>网络安全</li>
<li>DNS</li>
<li>《图解 HTTP》</li>
</ul>
<h2 id="资源-2"><a href="#资源-2" class="headerlink" title="资源"></a>资源</h2><ul>
<li>视频<ul>
<li>《计算机网络微课堂》：<a href="https://www.bilibili.com/video/BV1c4411d7jb">https://www.bilibili.com/video/BV1c4411d7jb</a></li>
</ul>
</li>
<li>书籍<ul>
<li>⭐《图解 HTTP》</li>
<li>《网络是怎样连接的》</li>
<li>⭐《图解 TCP &#x2F; IP》</li>
<li>《计算机网络-自顶向下方法》（难度较大，不推荐新手看）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java全栈学习路线</category>
      </categories>
      <tags>
        <tag>Java全栈学习路线</tag>
      </tags>
  </entry>
  <entry>
    <title>阶段5：项目实战</title>
    <url>//post/%E9%98%B6%E6%AE%B55%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98.html</url>
    <content><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><blockquote>
<p>综合所学技术从 0 到 1 开发和上线一个全面、有特色的、可以写进简历的个人项目。</p>
</blockquote>
<h1 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h1><blockquote>
<p>其实在之前的框架学习视频中应该就做过几个项目了，但相对不够完整和体系化。 有想法的同学可以做任何自己想做的项目，推荐参加一些作品类竞赛，练手、拿奖、收获项目经历一举三得。 暂时没想法的，建议先跟着专门带做项目的视频教程做 1 - 2 套 Java 完整项目，一定要从 0 到 1 自己手写！ 有能力的也可以试着用 GitHub 上的源码来学习~ 做一个完整的项目的确很不容易，建议大家根据自己的时间和兴趣选择 <strong>较新的、有配套源码的</strong> 教程，保持耐心。 </p>
</blockquote>
<h1 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h1><ul>
<li>尚硅谷 - 谷粒学院 - 微服务 + 全栈 - 在线教育实战项目：<a href="https://www.bilibili.com/video/BV1dQ4y1A75e">https://www.bilibili.com/video/BV1dQ4y1A75e</a>（全栈项目，前后端讲得都很全面）</li>
<li>尚硅谷 - 尚筹网 - Java项目实战开发教程 - SSM 框架 + 微服务架构：<a href="https://www.bilibili.com/video/BV1bE411T7oZ">https://www.bilibili.com/video/BV1bE411T7oZ</a>（500 多集，包含完整的用户权限管理，功能丰富、细致全面）</li>
<li>黑马 - 24 小时搞定 Java 毕设电商项目：<a href="https://www.bilibili.com/video/BV13f4y1r7fS">https://www.bilibili.com/video/BV13f4y1r7fS</a></li>
<li>黑马程序员 Java 项目《传智健康》，超完整的企业级医疗行业项目：<a href="https://www.bilibili.com/video/BV1Bo4y117zV">https://www.bilibili.com/video/BV1Bo4y117zV</a></li>
<li>黑马程序员 Java 项目《万信金融》企业级开发实战，互联网金融行业解决方案：<a href="https://www.bilibili.com/video/BV1Ub4y1f7rk">https://www.bilibili.com/video/BV1Ub4y1f7rk</a></li>
<li>黑马程序员 Java 项目 SaaS 移动办公完整版《iHRM 人力资源管理系统》，跨行业 SaaS 办公整合性解决方案：<a href="https://www.bilibili.com/video/BV18A411L7UX">https://www.bilibili.com/video/BV18A411L7UX</a></li>
<li>黑马程序员 Java 大型分布式微服务闪聚支付项目，Java 移动支付全生态系统：<a href="https://www.bilibili.com/video/BV17v411V79c">https://www.bilibili.com/video/BV17v411V79c</a></li>
<li>黑马程序员 Java 项目《好客租房》：<a href="https://www.bilibili.com/video/BV1sZ4y1F7PD">https://www.bilibili.com/video/BV1sZ4y1F7PD</a></li>
</ul>
<h1 id="项目源码（50-套）"><a href="#项目源码（50-套）" class="headerlink" title="项目源码（50 套）"></a>项目源码（50 套）</h1><h2 id="电商秒杀"><a href="#电商秒杀" class="headerlink" title="电商秒杀"></a>电商秒杀</h2><ul>
<li>天猫整站 J2EE：<a href="https://how2j.cn/module/115.html">https://how2j.cn/module/115.html</a></li>
<li>天猫整站 SSM：<a href="https://how2j.cn/module/134.html">https://how2j.cn/module/134.html</a></li>
<li>天猫整站 Springboot：<a href="https://how2j.cn/module/156.html">https://how2j.cn/module/156.html</a></li>
<li>mall-learning：<a href="https://github.com/macrozheng/mall-learningmall">https://github.com/macrozheng/mall-learningmall</a>（学习教程，架构、业务、技术要点全方位解析）</li>
<li>SpringBoot 电商商城系统 Mall4j：<a href="https://github.com/gz-yami/mall4j">https://github.com/gz-yami/mall4j</a></li>
<li>SpringBoot 完整电商系统 Mall：<a href="https://github.com/macrozheng/mall">https://github.com/macrozheng/mall</a>（包括前台商城系统及后台管理系统，基于 SpringBoot+MyBatis 实现）</li>
<li>newbee-mall：<a href="https://github.com/newbee-ltd/newbee-mall">https://github.com/newbee-ltd/newbee-mall</a> （一套电商系统，包括 newbee-mall 商城系统及 newbee-mall-admin 商城后台管理系统，基于 Spring Boot 2.X 及相关技术栈开发）</li>
<li>paascloud-master：<a href="https://github.com/paascloud/paascloud-master">https://github.com/paascloud/paascloud-master</a>（基于 spring cloud + vue + oAuth2.0，前后端分离商城系统）</li>
<li>mall-swarm：<a href="https://github.com/macrozheng/mall-swarm">https://github.com/macrozheng/mall-swarm</a>（一套微服务商城系统，采用了 Spring Cloud Greenwich、Spring Boot 2、MyBatis、Docker、Elasticsearch 等核心技术，同时提供了基于 Vue 的管理后台方便快速搭建系统）</li>
<li>onemall：<a href="https://github.com/YunaiV/onemall">https://github.com/YunaiV/onemall</a>（mall 商城，基于微服务的思想，构建在 B2C 电商场景下的项目实战。核心技术栈，是 Spring Boot + Dubbo 。未来，会重构成 Spring Cloud Alibaba）</li>
<li>litemall：<a href="https://github.com/linlinjava/litemall">https://github.com/linlinjava/litemall</a>（又一个小商城，litemall &#x3D; Spring Boot 后端 + Vue 管理员前端 + 微信小程序用户前端 + Vue 用户移动端）</li>
<li>xmall：<a href="https://github.com/Exrick/xmall">https://github.com/Exrick/xmall </a>（基于SOA架构的分布式电商购物商城 前后端分离 前台商城:Vue全家桶 后台管理系统）</li>
<li>miaosha：<a href="https://github.com/qiurunze123/miaosha">https://github.com/qiurunze123/miaosha</a> （秒杀系统设计与实现）</li>
<li>SecKill：<a href="https://github.com/hfbin/Seckill">https://github.com/hfbin/Seckill</a>（基于 SpringBoot+Mybatis+Redis+RabbitMQ 秒杀系统）</li>
</ul>
<h2 id="博客论坛"><a href="#博客论坛" class="headerlink" title="博客论坛"></a>博客论坛</h2><ul>
<li><a href="%5Bhttps://github.com/langhsu/mblog%5D(https://github.com/langhsu/mblog)">Mblog</a>：开源 Java 博客系统</li>
<li><a href="%5Bhttps://github.com/halo-dev/halo%5D(https://github.com/halo-dev/halo)">halo</a>：一个优秀的开源博客发布应用</li>
<li><a href="%5Bhttps://github.com/Qbian61/forum-java%5D(https://github.com/Qbian61/forum-java)">forum-java</a>：一款用 Java（spring boot） 实现的现代化社区（论坛&#x2F;问答&#x2F;BBS&#x2F;社交网络&#x2F;博客）系统平台</li>
<li><a href="%5Bhttps://github.com/lenve/vhr%5D(https://github.com/lenve/vhr)">vhr</a>：微人事是一个前后端分离的人力资源管理系统，项目采用 SpringBoot+Vue 开发。</li>
<li><a href="%5Bhttps://github.com/cloudfavorites/favorites-web%5D(https://github.com/cloudfavorites/favorites-web)">favorites-web</a>:云收藏 Spring Boot 2.X 开源项目。云收藏是一个使用 Spring Boot 构建的开源网站，可以让用户在线随时随地收藏的一个网站，在网站上分类整理收藏的网站或者文章。</li>
<li><a href="%5Bhttps://github.com/codedrinker/community%5D(https://github.com/codedrinker/community)">community</a>：码问，开源论坛、问答系统，现有功能提问、回复、通知、最新、最热、消除零回复功能。技术栈 Spring、Spring Boot、MyBatis、MySQL&#x2F;H2、Bootstrap</li>
<li><a href="%5Bhttps://github.com/yourkevin/NiterForum%5D(https://github.com/yourkevin/NiterForum)">NiterForum</a>：尼特社区-NiterForum-一个论坛&#x2F;社区程序。后端Springboot&#x2F;MyBatis&#x2F;Maven&#x2F;MySQL，前端Thymeleaf&#x2F;Layui。可供初学者，学习、交流使用。</li>
<li><a href="%5Bhttps://github.com/lenve/VBlog%5D(https://github.com/lenve/VBlog)">VBlog</a>：V部落，Vue+SpringBoot实现的多用户博客管理平台!</li>
<li><a href="%5Bhttps://github.com/damoqiongqiu/NiceFish%5D(https://github.com/damoqiongqiu/NiceFish)">NiceFish</a>：SpringBoot&#x2F;SpringCloud 前后端分离项目</li>
<li><a href="%5Bhttps://github.com/ZHENFENG13/My-Blog%5D(https://github.com/ZHENFENG13/My-Blog)">My-Blog</a>： My Blog 是由 SpringBoot + Mybatis + Thymeleaf 等技术实现的 Java 博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验。</li>
<li><a href="%5Bhttps://github.com/ZHENFENG13/My-Blog-layui%5D(https://github.com/ZHENFENG13/My-Blog-layui)">My-Blog-layui</a>：layui 版本的 My-Blog : A simple &amp; beautiful blogging system implemented with spring-boot &amp; layui &amp; thymeleaf &amp; mybatis My Blog 是由 SpringBoot + Layui + Mybatis + Thymeleaf 等技术实现的 Java 博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验</li>
<li><a href="%5Bhttps://github.com/88250/symphony%5D(https://github.com/88250/symphony)">symphony</a>：Java 实现的现代化社区</li>
</ul>
<h2 id="管理系统"><a href="#管理系统" class="headerlink" title="管理系统"></a>管理系统</h2><ul>
<li><a href="%5Bhttps://github.com/wxiaoqi/Spring-Cloud-Admin%5D(https://github.com/wxiaoqi/Spring-Cloud-Admin)">Spring-Cloud-Admin</a>：Cloud-Admin 是国内首个基于 Spring Cloud 微服务化开发平台，具有统一授权、认证后台管理系统，其中包含具备用户管理、资源权限管理、网关 API 管理等多个模块，支持多业务系统并行开发，可以作为后端服务的开发脚手架。代码简洁，架构清晰，适合学习和直接项目中使用。核心技术采用 Spring Boot2 以及 Spring Cloud Gateway 相关核心组件，前端采用 vue-element-admin 组件。</li>
<li><a href="%5Bhttps://github.com/tomsun28/bootshiro%5D(https://github.com/tomsun28/bootshiro)">bootshiro</a>：基于 springboot+shiro+jwt 的资源无状态认证权限管理系统后端</li>
<li><a href="%5Bhttps://github.com/72crm/72crm-java%5D(https://github.com/72crm/72crm-java)">悟空CRM</a>：基于jfinal+vue+ElementUI的前后端分离CRM系统</li>
<li><a href="%5Bhttps://github.com/elunez/eladmin%5D(https://github.com/elunez/eladmin)">EL-ADMIN</a>：基于 SpringBoot 的后台管理系统</li>
<li><a href="%5Bhttps://gitee.com/log4j/pig%5D(https://gitee.com/log4j/pig)">pig</a>：基于 Spring Boot 2.2、 Spring Cloud Hoxton &amp; Alibaba、 OAuth2 的 RBAC 权限管理系统。</li>
<li><a href="%5Bhttps://github.com/wuyouzhuguli/FEBS-Shiro%5D(https://github.com/wuyouzhuguli/FEBS-Shiro)">FEBS-Shiro</a>：Spring Boot 2.1.3，Shiro1.4.0 &amp; Layui 2.5.4 权限管理系统。</li>
<li><a href="%5Bhttps://github.com/Heeexy/SpringBoot-Shiro-Vue%5D(https://github.com/Heeexy/SpringBoot-Shiro-Vue)">Spring Boot-Shiro-Vue</a>：基于Spring Boot-Shiro-Vue 的权限管理</li>
<li><a href="%5Bhttps://github.com/ZeroWdd/studentmanager%5D(https://github.com/ZeroWdd/studentmanager)">studentmanager</a>：基于springboot+mybatis学生管理系统</li>
<li><a href="%5Bhttps://github.com/jishenghua/jshERP%5D(https://github.com/jishenghua/jshERP)">jshERP</a>：华夏ERP基于SpringBoot框架和SaaS模式，立志为中小企业提供开源好用的ERP软件，目前专注进销存+财务功能。主要模块有零售管理、采购管理、销售管理、仓库管理、财务管理、报表查询、系统管理等。支持预付款、收入支出、仓库调拨、组装拆卸、订单等特色功能。拥有库存状况、出入库统计等报表。同时对角色和权限进行了细致全面控制，精确到每个按钮和菜单。</li>
<li><a href="%5Bhttps://github.com/misterchaos/HotelSystem%5D(https://github.com/misterchaos/HotelSystem)">HotelSystem</a>：酒店管理系统 Java,tomcat,mysql,servlet,jsp实现，没有使用任何框架</li>
</ul>
<h2 id="开发平台"><a href="#开发平台" class="headerlink" title="开发平台"></a>开发平台</h2><ul>
<li><a href="%5Bhttps://github.com/2014shijina2014/open-capacity-platform%5D(https://github.com/2014shijina2014/open-capacity-platform)">open-capacity-platform</a>：微服务能力开发平台</li>
<li><a href="%5Bhttps://github.com/zhangdaiscott/jeecg-boot%5D(https://github.com/zhangdaiscott/jeecg-boot)">jeecg-boot</a>：JeecgBoot是一款基于BPM的低代码平台！前后端分离架构 SpringBoot 2.x，SpringCloud，Ant Design&amp;Vue，Mybatis-plus，Shiro，JWT，支持微服务。强大的代码生成器让前后端代码一键生成，实现低代码开发。</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><a href="%5Bhttps://github.com/mindskip/xzs%5D(https://github.com/mindskip/xzs)">学之思在线考试系统</a>：一款 java + vue 的前后端分离的考试系统</li>
<li><a href="%5Bhttps://github.com/Jackson0714/PassJava-Platform%5D(https://github.com/Jackson0714/PassJava-Platform)">PassJava-Platform</a>：一款面试刷题的 Spring Cloud 开源系统</li>
<li><a href="%5Bhttps://github.com/kekingcn/kkFileView%5D(https://github.com/kekingcn/kkFileView)">kkFileView</a>：使用spring boot打造文件文档在线预览项目</li>
<li><a href="%5Bhttps://github.com/baomidou/dynamic-datasource-spring-boot-starter%5D(https://github.com/baomidou/dynamic-datasource-spring-boot-starter)">dynamic-datasource</a>：一个基于springboot的快速集成多数据源的启动器</li>
<li><a href="%5Bhttps://github.com/373675032/moti-cloud%5D(https://github.com/373675032/moti-cloud)">moti-cloud</a>：莫提网盘，基于 SpringBoot+MyBatis+ThymeLeaf+BootStrap，适合初学者</li>
<li><a href="%5Bhttps://github.com/qiurunze123/threadandjuc%5D(https://github.com/qiurunze123/threadandjuc)">threadandjuc</a>：three-high-import 高可用\高可靠\高性能，三高多线程导入系统（该项目意义为理论贯通)</li>
<li><a href="%5Bhttps://github.com/proxyee-down-org/proxyee-down%5D(https://github.com/proxyee-down-org/proxyee-down)">proxyee-down</a>：http下载工具，基于http代理，支持多连接分块下载</li>
<li><a href="%5Bhttps://github.com/sfturing/hosp_order%5D(https://github.com/sfturing/hosp_order)">hosp_order</a>：医院预约挂号系统，基于 SSM 框架</li>
<li><a href="%5Bhttps://how2j.cn/module/170.html%5D(https://how2j.cn/module/170.html)">趋势投资 SpringCloud</a></li>
<li><a href="%5Bhttps://how2j.cn/module/176.html%5D(https://how2j.cn/module/176.html)">DiyTomcat</a></li>
</ul>
]]></content>
      <categories>
        <category>Java全栈学习路线</category>
      </categories>
      <tags>
        <tag>Java全栈学习路线</tag>
      </tags>
  </entry>
  <entry>
    <title>阶段3：Java Web开发基础</title>
    <url>//post/%E9%98%B6%E6%AE%B53%EF%BC%9AJava%20Web%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><blockquote>
<p>面向薪资编程，学习实际工作要用的技术，并能 <strong>独立</strong> 做出一个具有完整功能的 Java Web 项目。</p>
</blockquote>
<h1 id="MySQL-数据库（1周）"><a href="#MySQL-数据库（1周）" class="headerlink" title="MySQL 数据库（1周）"></a>MySQL 数据库（1周）</h1><blockquote>
<p>企业中大部分业务数据都是用关系型数据库存储的，因此数据库是后台开发同学的必备技能，其中 MySQL 数据库是目前的主流，也是面试时的重点。</p>
</blockquote>
<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ul>
<li>基本概念</li>
<li>MySQL 搭建</li>
<li>SQL 语句编写</li>
<li>约束</li>
<li>索引</li>
<li>事务</li>
<li>设计数据库表</li>
<li>性能优化</li>
</ul>
<h2 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h2><blockquote>
<p>其中，<strong>SQL 语句编写</strong> 和 <strong>设计数据库表</strong> 这两个能力一定要有！ 比如让你做一个学生管理系统，你要能想到需要哪些表，比如学生表、班级表；每个表需要哪些字段、字段类型。 这就要求大家多写 SQL、多根据实际的业务场景去练习设计能力。</p>
</blockquote>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li>视频<ul>
<li>⭐ 老杜 - mysql入门基础 + 数据库实战：<a href="https://www.bilibili.com/video/BV1Vy4y1z7EX">https://www.bilibili.com/video/BV1Vy4y1z7EX</a>（较新、内容相对精炼，有习题）</li>
<li>尚硅谷 - MySQL基础教程：<a href="https://www.bilibili.com/video/BV1xW411u7ax">https://www.bilibili.com/video/BV1xW411u7ax</a>（小姐姐讲课，但感觉音质一般</li>
</ul>
</li>
<li>在线练习<ul>
<li>⭐ SQL 自学网：<a href="http://xuesql.cn/">http://xuesql.cn/</a></li>
<li>⭐ SQL 在线运行：<a href="https://www.bejson.com/runcode/sql/">https://www.bejson.com/runcode/sql/</a></li>
</ul>
</li>
<li>文档<ul>
<li>SQL - 菜鸟教程：<a href="https://www.runoob.com/sql/sql-tutorial.html">https://www.runoob.com/sql/sql-tutorial.html</a></li>
<li>MySQL - 菜鸟教程：<a href="https://www.runoob.com/mysql/mysql-tutorial.html">https://www.runoob.com/mysql/mysql-tutorial.html</a></li>
</ul>
</li>
</ul>
<h1 id="开发框架（2-个月）"><a href="#开发框架（2-个月）" class="headerlink" title="开发框架（2 个月）"></a>开发框架（2 个月）</h1><blockquote>
<p>Java 之所以能成为主流的企业开发语言，很大一部分原因是它完善的框架生态，用好框架，不仅能够大大提升开发效率，还能提高项目的稳定性、减少维护成本。 开发框架是后台开发工作中不可或缺的，也是面试考察的重点，一定要好好学。 不知道 Java 能做什么的朋友们，学完开发框架，就会有答案啦。 </p>
</blockquote>
<h2 id="知识-1"><a href="#知识-1" class="headerlink" title="知识"></a>知识</h2><ul>
<li><strong>Java Web</strong><ul>
<li>描述：Java 网页应用开发基础</li>
<li>前端基础</li>
<li>XML</li>
<li>JSON</li>
<li>Servlet</li>
<li>Filter</li>
<li>Listener</li>
<li>JSP</li>
<li>JSTL</li>
<li>Cookie</li>
<li>Session</li>
</ul>
</li>
<li><strong>Spring 5</strong><ul>
<li>描述：Java 轻量级应用框架</li>
<li>IOC</li>
<li>AOP</li>
<li>事务</li>
</ul>
</li>
<li><strong>SpringMVC</strong><ul>
<li>描述：Java 轻量级 web 开发框架</li>
<li>什么是 MVC？</li>
<li>请求与响应</li>
<li>Restful API</li>
<li>拦截器</li>
<li>配置</li>
<li>执行过程</li>
</ul>
</li>
<li><strong>MyBatis</strong><ul>
<li>描述：数据访问框架，操作数据库进行增删改查等操作</li>
<li>增删改查</li>
<li>全局配置</li>
<li>动态 SQL</li>
<li>缓存</li>
<li>和其他框架的整合</li>
<li>逆向工程</li>
</ul>
</li>
<li><strong>MyBatis Plus</strong><ul>
<li>描述：Mybatis 的增强工具，能够简化开发、提高效率</li>
<li>引入</li>
<li>通用 CRUD</li>
<li>条件构造器</li>
<li>代码生成器</li>
<li>插件扩展</li>
<li>自定义全局操作</li>
</ul>
</li>
<li><strong>SpringBoot 2</strong><ul>
<li>描述：简化 Spring 应用的初始搭建以及开发过程，提高效率</li>
<li>常用注解</li>
<li>资源整合</li>
<li>高级特性</li>
<li>本地热部署</li>
</ul>
</li>
<li><strong>Spring Security</strong><ul>
<li>描述：Spring 的安全管理框架</li>
<li>用户认证</li>
<li>权限管理</li>
</ul>
</li>
<li><strong>Maven &#x2F; Gradle</strong><ul>
<li>描述：项目管理工具</li>
<li>构建</li>
<li>依赖管理</li>
<li>插件</li>
<li>配置</li>
<li>子父工程</li>
</ul>
</li>
</ul>
<h2 id="学习建议-1"><a href="#学习建议-1" class="headerlink" title="学习建议"></a>学习建议</h2><blockquote>
<p>由于技术较多，且框架之间存在一定的联系，因此建议大家看同一系列的视频教程（尚硅谷、狂神说等等都可以），以保证学习内容的连续以及体验上的一致。 学这些技术的时候，一定要多记笔记，并且跟着老师写代码。原理部分不要太过纠结，先以能跟着敲出代码、写出可运行的项目为主，有些东西做出来也能帮助你更好地理解理论。 学习顺序挺重要的，建议不要一上手就学 SpringBoot。只有先学习下自己整合框架的方法，才能帮你理解 SpringBoot 解决的问题，感受到它的方便和高效。 Maven &#x2F; Gradle 当工具用就好，面试基本不问，跟着框架教程去用就行了，先不用花太多时间去深入学。</p>
</blockquote>
<h2 id="资源-1"><a href="#资源-1" class="headerlink" title="资源"></a>资源</h2><p><strong>视频（按顺序看）</strong></p>
<ul>
<li>⭐ 尚硅谷最新版 JavaWeb 全套教程：<a href="https://www.bilibili.com/video/BV1Y7411K7zz">https://www.bilibili.com/video/BV1Y7411K7zz</a>（前端部分最好也看下）</li>
<li>⭐ 尚硅谷 - Spring 5 框架最新版教程（idea版）：<a href="https://www.bilibili.com/video/BV1Vf4y127N5">https://www.bilibili.com/video/BV1Vf4y127N5</a></li>
<li>⭐ 尚硅谷 - SpringMVC 2021 最新教程：<a href="https://www.bilibili.com/video/BV1Ry4y1574R">https://www.bilibili.com/video/BV1Ry4y1574R</a></li>
<li>⭐ 尚硅谷 - MyBatis 实战教程全套完整版：<a href="https://www.bilibili.com/video/BV1mW411M737">https://www.bilibili.com/video/BV1mW411M737</a></li>
<li>⭐ 尚硅谷 - MyBatisPlus 教程：<a href="https://www.bilibili.com/video/BV1Ds411E76Y">https://www.bilibili.com/video/BV1Ds411E76Y</a></li>
<li>Maven 零基础入门教程：<a href="https://www.bilibili.com/video/BV1TW411g7hP">https://www.bilibili.com/video/BV1TW411g7hP</a>（搞不懂 Maven 可以看看）</li>
<li>⭐ 雷丰阳 2021 版 SpringBoot2 零基础入门：<a href="https://www.bilibili.com/video/BV19K4y1L7MT">https://www.bilibili.com/video/BV19K4y1L7MT</a></li>
<li>尚硅谷 - SpringSecurity 框架教程：<a href="https://www.bilibili.com/video/BV15a411A7kP">https://www.bilibili.com/video/BV15a411A7kP</a></li>
</ul>
<h1 id="开发规范（3-天）"><a href="#开发规范（3-天）" class="headerlink" title="开发规范（3 天）"></a>开发规范（3 天）</h1><blockquote>
<p>开发不规范，同事两行泪。<br>开发规范是团队开发中必须遵守的，有利于提高项目的开发效率、降低维护成本。</p>
</blockquote>
<h2 id="知识-2"><a href="#知识-2" class="headerlink" title="知识"></a>知识</h2><ol>
<li>代码规范<ul>
<li>代码风格</li>
<li>命名</li>
<li>其他规则</li>
</ul>
</li>
<li>提交规范</li>
</ol>
<h2 id="学习建议-2"><a href="#学习建议-2" class="headerlink" title="学习建议"></a>学习建议</h2><blockquote>
<p>简单过一遍大厂团队的规范手册就好了，以后做项目的时候能想起来的话就去使用，或者从书中、网上查规范，再去遵守。 项目做得多了，自然会养成好的习惯，不用刻意去记（毕竟每个团队规范也不完全相同，背了也没用）。</p>
</blockquote>
<h2 id="资源-2"><a href="#资源-2" class="headerlink" title="资源"></a>资源</h2><ul>
<li>书籍<ul>
<li>⭐ 阿里巴巴 Java 开发手册：<a href="https://developer.aliyun.com/graph/java">https://developer.aliyun.com/graph/java</a>（搜索《Java开发手册》）</li>
</ul>
</li>
<li>视频<ul>
<li>华山版《Java开发手册》独家讲解：<a href="https://developer.aliyun.com/live/1201">https://developer.aliyun.com/live/1201</a></li>
</ul>
</li>
<li>文档<ul>
<li>Google Java Style Guide：<a href="https://google.github.io/styleguide/javaguide.html">https://google.github.io/styleguide/javaguide.html</a>（谷歌 Java 代码规范）</li>
</ul>
</li>
</ul>
<h1 id="Git（3-天）"><a href="#Git（3-天）" class="headerlink" title="Git（3 天）"></a>Git（3 天）</h1><blockquote>
<p>此前大家可能听说过 GitHub，一流的代码开源托管平台。 Git 和它可不一样，是一个版本控制工具，可以更好地管理和共享项目代码，比如把自己的代码传到 GitHub 上、或者从远程下载。 无论自己做项目、还是团队开发，Git 都是现在不可或缺的神器。</p>
</blockquote>
<h2 id="知识-3"><a href="#知识-3" class="headerlink" title="知识"></a>知识</h2><ul>
<li>工作区</li>
<li>分支</li>
<li>代码提交、推送、拉取、回退、重置</li>
<li>分支操作</li>
<li>代码合并、解决冲突</li>
<li>标签</li>
<li>cherry-pick</li>
</ul>
<h2 id="学习建议-3"><a href="#学习建议-3" class="headerlink" title="学习建议"></a>学习建议</h2><blockquote>
<p>每个命令跟着敲一遍，有个大致的印象，会用即可，用的多了自然熟悉了。</p>
</blockquote>
<h2 id="资源-3"><a href="#资源-3" class="headerlink" title="资源"></a>资源</h2><ul>
<li>视频<ul>
<li>⭐【尚硅谷】5h打通Git全套教程丨2021最新IDEA版 <a href="https://www.bilibili.com/video/BV1vy4y1s7k6">https://www.bilibili.com/video/BV1vy4y1s7k6</a></li>
</ul>
</li>
<li>书籍<ul>
<li>猴子都能懂的 Git 入门 <a href="https://backlog.com/git-tutorial/cn/">https://backlog.com/git-tutorial/cn/</a></li>
<li>⭐ GitHub 漫游指南 <a href="https://github.phodal.com/">https://github.phodal.com/</a></li>
</ul>
</li>
<li>文档<ul>
<li>GitHub 官方文档：<a href="https://docs.github.com/cn">https://docs.github.com/cn</a></li>
</ul>
</li>
<li>游戏<ul>
<li>Learning Git Branching：<a href="https://learngitbranching.js.org/?locale=zh_CN">https://learngitbranching.js.org/?locale=zh_CN</a></li>
</ul>
</li>
</ul>
<h1 id="Linux（2周）"><a href="#Linux（2周）" class="headerlink" title="Linux（2周）"></a>Linux（2周）</h1><blockquote>
<p>企业中的很多前后台项目都是部署在 Linux 服务器上的，因此很有必要熟悉 Linux 的操作和脚本的编写。后面学微服务、学架构都是在多台。</p>
</blockquote>
<h2 id="知识-4"><a href="#知识-4" class="headerlink" title="知识"></a>知识</h2><ul>
<li>Linux 系统安装</li>
<li>环境变量</li>
<li>文件管理</li>
<li>用户管理</li>
<li>内存管理</li>
<li>磁盘管理</li>
<li>进程管理</li>
<li>网络管理</li>
<li>软件包管理</li>
<li>服务管理</li>
<li>日志管理</li>
<li>Linux 内核</li>
<li><strong>常用命令</strong></li>
<li><strong>常用环境搭建</strong></li>
<li><strong>Shell 脚本编程</strong></li>
<li><strong>VIM 的使用</strong></li>
</ul>
<h2 id="学习建议-4"><a href="#学习建议-4" class="headerlink" title="学习建议"></a>学习建议</h2><blockquote>
<p>多动手实践，建议自己购买一台云服务器，并且在本地搭建 Linux 虚拟机环境。 一定要自己从 0 开始手敲命令安装软件、部署服务，熟悉整个项目的上线流程。 每个命令至少要跟着敲一遍，了解它们的作用，并通过自然地练习，熟悉常用的 Linux 命令。 记不住没关系，用文档查就行了。 先会用，再理解。</p>
</blockquote>
<h2 id="资源-4"><a href="#资源-4" class="headerlink" title="资源"></a>资源</h2><ul>
<li>视频<ul>
<li>⭐ 2021 韩顺平 一周学会Linux <a href="https://www.bilibili.com/video/BV1Sv411r7vd">https://www.bilibili.com/video/BV1Sv411r7vd</a>（基于 CentOS 7.6 ）</li>
</ul>
</li>
<li>书籍<ul>
<li>《鸟哥的 Linux 私房菜 —— 基础篇》<a href="http://cn.linux.vbird.org/linux_basic/linux_basic.php">http://cn.linux.vbird.org/linux_basic&#x2F;linux_basic.php</a>（经典）</li>
</ul>
</li>
<li>文档<ul>
<li>Linux 工具快速教程：<a href="https://linuxtools-rst.readthedocs.io/">https://linuxtools-rst.readthedocs.io</a>（基础、工具进阶、工具参考）</li>
</ul>
</li>
<li>实战<ul>
<li>⭐ 蓝桥云课 Linux 基础入门：<a href="https://www.lanqiao.cn/courses/1">https://www.lanqiao.cn/courses/1</a></li>
<li>腾讯云动手实验室：<a href="https://cloud.tencent.com/developer/labs">https://cloud.tencent.com/developer/labs</a></li>
<li>阿里云体验实验室：<a href="https://developer.aliyun.com/adc/labs/">https://developer.aliyun.com/adc/labs/</a></li>
<li>阿里云知行实验室：<a href="https://start.aliyun.com/">https://start.aliyun.com/</a></li>
<li>华为云沙箱实验室：<a href="https://lab.huaweicloud.com/">https://lab.huaweicloud.com/</a></li>
</ul>
</li>
<li>社区<ul>
<li>Linux 中国：<a href="https://linux.cn/">https://linux.cn/</a></li>
</ul>
</li>
<li>工具<ul>
<li>⭐ Linux 命令搜索：<a href="https://wangchujiang.com/linux-command">https://wangchujiang.com/linux-command</a></li>
<li>Linux 命令大全手册：<a href="https://www.linuxcool.com/">https://www.linuxcool.com/</a></li>
<li>Linux 命令示例：<a href="http://linux-commands-examples.com/">http://linux-commands-examples.com/</a></li>
<li>宝塔 Linux 面板：<a href="https://www.bt.cn/">https://www.bt.cn/</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java全栈学习路线</category>
      </categories>
      <tags>
        <tag>Java全栈学习路线</tag>
      </tags>
  </entry>
  <entry>
    <title>阶段7：Java求职</title>
    <url>//post/%E9%98%B6%E6%AE%B57%EF%BC%9AJava%20%E6%B1%82%E8%81%8C.html</url>
    <content><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><blockquote>
<p>找到好工作</p>
</blockquote>
<h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><ol>
<li>尽早做规划，可以通过大厂招聘官网的岗位描述来了解岗位的要求</li>
<li>多读面经，坚持刷算法</li>
<li>多参与面试，持续复盘总结</li>
</ol>
<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><ul>
<li><strong>岗位要求</strong><ul>
<li>阿里 Java 开发：<a href="https://campus.alibaba.com/position.htm?refno=12699">https://campus.alibaba.com/position.htm?refno=12699</a></li>
<li>腾讯后台开发：<a href="https://join.qq.com/post_detail.html?pid=1&id=101&tid=2">https://join.qq.com/post_detail.html?pid&#x3D;1&amp;id&#x3D;101&amp;tid&#x3D;2</a></li>
<li>腾讯全栈开发：<a href="https://join.qq.com/post_detail.html?pid=1&id=137&tid=2">https://join.qq.com/post_detail.html?pid&#x3D;1&amp;id&#x3D;137&amp;tid&#x3D;2</a></li>
<li>腾讯运营开发：<a href="https://join.qq.com/post_detail.html?pid=1&id=105&tid=2">https://join.qq.com/post_detail.html?pid&#x3D;1&amp;id&#x3D;105&amp;tid&#x3D;2</a></li>
<li>美团后端开发：<a href="https://campus.meituan.com/jobs?jobFamily=1&jobId=4005&jobType=1&pageNo=2">https://campus.meituan.com/jobs?jobFamily=1&jobId=4005&jobType=1&pageNo=2</a></li>
<li>华为软件开发：<a href="https://career.huawei.com/reccampportal/portal5/campus-recruitment-detail.html?jobId=176044">https://career.huawei.com/reccampportal/portal5/campus-recruitment-detail.html?jobId=176044</a></li>
</ul>
</li>
<li><strong>知识总结</strong><ul>
<li>⭐ 牛客 Java 面试宝典：<a href="https://www.nowcoder.com/tutorial/94">https://www.nowcoder.com/tutorial/94</a></li>
<li>阿里 Java 技术图谱：<a href="https://developer.aliyun.com/graph/java">https://developer.aliyun.com/graph/java</a></li>
</ul>
</li>
<li><strong>面经</strong><ul>
<li>⭐ 2021 最新 Java 笔试、面试题合集：<a href="https://pan.baidu.com/s/1DE4HAu-DS80n7VOaGpU_KQ">https://pan.baidu.com/s/1DE4HAu-DS80n7VOaGpU_KQ</a>（密码：lkw1）</li>
<li>⭐ 牛客面经：<a href="https://www.nowcoder.com/discuss/experience?tagId=639">https://www.nowcoder.com/discuss/experience?tagId=639</a></li>
</ul>
</li>
<li><strong>视频</strong><ul>
<li>⭐ 尚硅谷 2021 逆袭版 Java 面试题第三季：<a href="https://www.bilibili.com/video/BV1Hy4y1B78T">https://www.bilibili.com/video/BV1Hy4y1B78T</a></li>
<li>⭐ 阿里大佬透彻讲解 Java 面试 500 道必考题：<a href="https://www.bilibili.com/video/BV1yU4y1J7Bb">https://www.bilibili.com/video/BV1yU4y1J7Bb</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java全栈学习路线</category>
      </categories>
      <tags>
        <tag>Java全栈学习路线</tag>
      </tags>
  </entry>
  <entry>
    <title>阶段4：Java Web开发进阶</title>
    <url>//post/%E9%98%B6%E6%AE%B54%EF%BC%9AJava%20Web%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6.html</url>
    <content><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><blockquote>
<p>学习更多企业级开发技术和编程思想，能够结合多种技术，独立开发出架构合理的完整系统，解决实际问题 。 要了解为什么需要这个技术？什么时候用哪些技术？</p>
</blockquote>
<h1 id="设计模式（21-天）"><a href="#设计模式（21-天）" class="headerlink" title="设计模式（21 天）"></a>设计模式（21 天）</h1><blockquote>
<p>设计模式是软件开发中解决一类问题的通用方法。 使用设计模式能让你写出更优雅、可维护的代码，也正因如此，很多框架源码都用到了设计模式，你不学很难看懂。</p>
</blockquote>
<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ol>
<li><strong>创建型模式：对象实例化的模式，创建型模式用于解耦对象的实例化过程</strong><ul>
<li>单例模式</li>
<li>工厂方法模式</li>
<li>抽象工厂</li>
<li>建造者模式</li>
<li>原型模式</li>
</ul>
</li>
<li><strong>结构型模式：把类或对象结合在一起形成一个更大的结构</strong><ul>
<li>适配器模式</li>
<li>组合模式</li>
<li>装饰器模式</li>
<li>代理模式</li>
<li>享元模式</li>
<li>外观模式</li>
<li>桥接模式</li>
</ul>
</li>
<li><strong>行为型模式：类和对象如何交互，及划分责任和算法</strong><ul>
<li>迭代器模式</li>
<li>模板方法模式</li>
<li>策略模式</li>
<li>命令模式</li>
<li>状态模式</li>
<li>责任链模式</li>
<li>备忘录模式</li>
<li>观察者模式</li>
<li>访问者模式</li>
<li>中介者模式</li>
<li>解释器模式</li>
</ul>
</li>
</ol>
<h2 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h2><blockquote>
<p>先理解概念，了解每个设计模式的特点和应用场景，再多加练习，运用到实际项目。</p>
</blockquote>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><strong>书籍</strong><ul>
<li>⭐《图解设计模式》（强烈推荐这本书，用 Java 语言实现，图多、有示例代码、有习题和答案）</li>
<li>《Head First 设计模式》</li>
<li>《大话设计模式》</li>
<li>《设计模式：可复用面向对象软件的基础》（大黑书，有能力的话也可以去读）</li>
</ul>
</li>
<li><strong>视频</strong><ul>
<li>尚硅谷图解 Java 设计模式：<a href="https://www.bilibili.com/video/BV1G4411c7N4">https://www.bilibili.com/video/BV1G4411c7N4</a></li>
</ul>
</li>
<li><strong>文档</strong><ul>
<li>菜鸟教程：<a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">https://www.runoob.com/design-pattern/design-pattern-tutorial.html</a></li>
<li>图说设计模式：<a href="https://design-patterns.readthedocs.io/zh_CN/latest/">https://design-patterns.readthedocs.io/zh_CN&#x2F;latest&#x2F;</a></li>
</ul>
</li>
</ul>
<h1 id="中间件（14-天）"><a href="#中间件（14-天）" class="headerlink" title="中间件（14 天）"></a>中间件（14 天）</h1><blockquote>
<p>除了框架外，企业项目开发也会用到大量独立的中间件，以解决某些实际问题，比如提高项目的性能、提高项目的稳定性和可靠性等。 下面分享几个最常用的主流中间件。</p>
</blockquote>
<h2 id="知识-1"><a href="#知识-1" class="headerlink" title="知识"></a>知识</h2><ul>
<li><strong>Redis 缓存</strong><ul>
<li>数据类型</li>
<li>常用操作</li>
<li>Java 操作 Redis</li>
<li>主从模型搭建</li>
<li>哨兵集群搭建</li>
<li>日志持久化</li>
<li>应用场景</li>
</ul>
</li>
<li><strong>RabbitMQ、RocketMQ、Kafka消息队列</strong><ul>
<li>消息队列的作用</li>
<li>生产消费模型</li>
<li>交换机模型</li>
<li>死信队列</li>
<li>延迟队列</li>
<li>消息持久化</li>
<li>Java 操作</li>
<li>集群搭建</li>
</ul>
</li>
<li><strong>Nginx 网关</strong><ul>
<li>Nginx 作用</li>
<li>正向代理</li>
<li>反向代理（负载均衡）</li>
<li>常用命令</li>
<li>配置</li>
<li>动静分离（网站部署）</li>
<li>集群搭建</li>
</ul>
</li>
</ul>
<h2 id="学习建议-1"><a href="#学习建议-1" class="headerlink" title="学习建议"></a>学习建议</h2><blockquote>
<p>学会如何使用中间件并不难，先能够独立使用，了解他们的应用场景；再用 Java 来操作中间件，和项目相结合。 跟着视频教程实操一遍即可，可以等到面试前再去深入了解原理和高级特性。</p>
</blockquote>
<h2 id="资源-1"><a href="#资源-1" class="headerlink" title="资源"></a>资源</h2><ul>
<li><strong>视频</strong><ul>
<li>⭐ 尚硅谷 - 2021 最新 Redis 6 入门到精通教程：<a href="https://www.bilibili.com/video/BV1Rv41177Af">https://www.bilibili.com/video/BV1Rv41177Af</a>（基于 Redis 6 的，推荐）</li>
<li>⭐ 尚硅谷 - 2021 最新 RabbitMQ 教程：<a href="https://www.bilibili.com/video/BV1cb4y1o7zz">https://www.bilibili.com/video/BV1cb4y1o7zz</a>（很新很全面）</li>
<li>⭐ 尚硅谷 - Nginx 教程由浅入深：<a href="https://www.bilibili.com/video/BV1zJ411w7SV">https://www.bilibili.com/video/BV1zJ411w7SV</a>（比较全面）</li>
</ul>
</li>
<li><strong>文档</strong><ul>
<li>Redis 命令参考：<a href="http://redisdoc.com/">http://redisdoc.com/</a></li>
<li>Redis 面试题整理：<a href="https://github.com/lokles/Web-Development-Interview-With-Java/blob/main/Redis%E9%97%AE%E9%A2%98.md">https://github.com/lokles/Web-Development-Interview-With-Java/blob/main/Redis%E9%97%AE%E9%A2%98.md</a></li>
<li>RabbitMQ 中文文档：<a href="http://rabbitmq.mr-ping.com/">http://rabbitmq.mr-ping.com/</a></li>
<li>Nginx 中文文档：<a href="https://www.nginx.cn/doc/index.html">https://www.nginx.cn/doc/index.html</a></li>
</ul>
</li>
<li><strong>书籍</strong><ul>
<li>《Redis 实战》（经典）</li>
<li>《RabbitMQ 实战：高效部署分布式消息队列》（经典）</li>
</ul>
</li>
<li><strong>工具</strong><ul>
<li>⭐ Redis 在线练习：<a href="https://try.redis.io/">https://try.redis.io/</a>（强烈推荐）</li>
<li>⭐ RabbitMQ 在线模拟器：<a href="http://tryrabbitmq.com/">http://tryrabbitmq.com/</a></li>
<li>Nginx 配置在线生成：<a href="https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN">https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN</a></li>
</ul>
</li>
<li><strong>相关技术</strong><ul>
<li>缓存：Memcached、Ehcache</li>
<li>队列：Kafka、ActiveMQ、TubeMQ、RocketMQ</li>
<li>网关：HAProxy</li>
</ul>
</li>
</ul>
<h1 id="Netty-网络编程（14-天）"><a href="#Netty-网络编程（14-天）" class="headerlink" title="Netty 网络编程（14 天）"></a>Netty 网络编程（14 天）</h1><blockquote>
<p>开源的 Java 网络编程框架，用于开发高性能（事件驱动、异步非阻塞）、高可靠的网络服务器和客户端程序。 很多网络框架和服务器程序都用到了 Netty 作为底层，学好 Netty 不仅可以让我们自己实现高性能服务器，也能更好地理解其他的框架应用、阅读源码。</p>
</blockquote>
<h2 id="知识-2"><a href="#知识-2" class="headerlink" title="知识"></a>知识</h2><ul>
<li>IO 模型（BIO &#x2F; NIO）</li>
<li>Channel</li>
<li>Buffer</li>
<li>Seletor</li>
<li>Netty 模型</li>
<li>WebSocket 编程（动手做个聊天室）</li>
</ul>
<h2 id="学习建议-2"><a href="#学习建议-2" class="headerlink" title="学习建议"></a>学习建议</h2><blockquote>
<p>不同于之前学的 SSM 框架，Netty 还是需要一定学习成本的，一方面是国内资源太缺乏，另一方面很多重要的概念（比如 NIO）还是要多动手写代码调试才能理解。 还是建议先从视频入门，并且不建议在 Netty 上花太多时间，面试的时候一般也就考察一些 Netty 思想。</p>
</blockquote>
<h2 id="资源-2"><a href="#资源-2" class="headerlink" title="资源"></a>资源</h2><ul>
<li><strong>视频</strong><ul>
<li>⭐ 尚硅谷Netty教程：<a href="https://www.bilibili.com/video/BV1DJ411m7NR">https://www.bilibili.com/video/BV1DJ411m7NR</a></li>
<li>Netty 技术演讲（中文字幕版）：<a href="https://www.youtube.com/watch?v=I8yy2Cy7dDI">https://www.youtube.com/watch?v=I8yy2Cy7dDI</a></li>
</ul>
</li>
<li><strong>文档</strong><ul>
<li>Netty 4 用户指南：<a href="https://www.w3cschool.cn/netty_4_user_guide/">https://www.w3cschool.cn/netty_4_user_guide&#x2F;</a></li>
</ul>
</li>
<li><strong>书籍</strong><ul>
<li>《Netty 实战》</li>
</ul>
</li>
<li><strong>相关技术</strong><ul>
<li>Vertx：<a href="http://vertxchina.github.io/vertx-translation-chinese/">http://vertxchina.github.io/vertx-translation-chinese/</a>（比 Netty 简单多了，实在看不懂 Netty 也可以学习下这个）</li>
</ul>
</li>
</ul>
<h1 id="微服务（60-天）"><a href="#微服务（60-天）" class="headerlink" title="微服务（60 天）"></a>微服务（60 天）</h1><blockquote>
<p>随着互联网的发展，项目越来越复杂，单机项目已无法满足开发、运维、并发、可靠性等需求。 后台架构不断演进，可以将庞大的项目拆分成一个个职责明确、功能独立的细小模块，模块可以部署在多台服务器上，相互配合协作，提供完整的系统能力。 想做大型项目，这块儿一定要好好学。</p>
</blockquote>
<h2 id="知识-3"><a href="#知识-3" class="headerlink" title="知识"></a>知识</h2><ul>
<li><strong>Dubbo</strong><ul>
<li>架构演进</li>
<li>RPC</li>
<li>Zookeeper</li>
<li>服务提供者</li>
<li>服务消费者</li>
<li>项目搭建</li>
</ul>
</li>
<li><strong>微服务</strong><ul>
<li>微服务概念</li>
<li>Spring Cloud 框架<ul>
<li>父子工程</li>
<li>服务注册与发现</li>
<li>注册中心 Eureka、Zookeeper、Consul</li>
<li>Ribbon 负载均衡</li>
<li>Feign 服务调用</li>
<li>Hystrix 服务限流、降级、熔断</li>
<li>Resilience4j 服务容错</li>
<li>Gateway（Zuul）微服务网关</li>
<li>Config 分布式配置中心</li>
<li>分布式服务总线</li>
<li>分布式链路追踪</li>
</ul>
</li>
<li>Spring Cloud Alibaba<ul>
<li>Nacos 注册、配置中心</li>
<li>OpenFeign 服务调用</li>
<li>Sentinel 流控</li>
<li>Seata 分布式事务</li>
</ul>
</li>
</ul>
</li>
<li><strong>接口管理</strong><ul>
<li>Swagger 接口文档</li>
<li>Postman 接口测试</li>
</ul>
</li>
</ul>
<h2 id="学习建议-3"><a href="#学习建议-3" class="headerlink" title="学习建议"></a>学习建议</h2><blockquote>
<p>时间不急的话，建议先从 Dubbo 学起，对分布式、RPC、微服务有些基本的了解，再去食用 Spring Cloud 全家桶会更香。 这部分内容的学习，原理 + 实践都很重要，也不要被各种高大上的词汇唬住了，都是上层（应用层）的东西，基本没有什么算法，跟着视频教程学，其实还是很好理解的。 分布式相关知识非常多，但这里不用刻意去背，先通过视频教程实战使用一些微服务框架，也能对其中的概念有基本的了解。</p>
</blockquote>
<h2 id="资源-3"><a href="#资源-3" class="headerlink" title="资源"></a>资源</h2><ul>
<li><strong>视频</strong><ul>
<li>⭐ 尚硅谷 Dubbo 教程：<a href="https://www.bilibili.com/video/BV1ns411c7jV">https://www.bilibili.com/video/BV1ns411c7jV</a></li>
<li>⭐ 尚硅谷 SpringCloud（H版&amp;alibaba）框架开发教程（微服务分布式架构）：<a href="https://www.bilibili.com/video/BV18E411x7eT">https://www.bilibili.com/video/BV18E411x7eT</a>（把国外的 Spring Cloud 和国内的 Spring Cloud Alibaba 结合在一起对比着去讲，主流技术栈、知识点都讲到了）</li>
</ul>
</li>
<li><strong>文档</strong><ul>
<li>Apache Dubbo 官方文档：<a href="https://dubbo.apache.org/zh/">https://dubbo.apache.org/zh/</a></li>
<li>Spring Cloud Alibaba 官方文档：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></li>
<li>⭐ Swagger 教学文档：<a href="https://doc.xiaominfo.com/">https://doc.xiaominfo.com/</a>（跟着快速开始直接用就好了）</li>
</ul>
</li>
</ul>
<h1 id="Docker、k8s（7-天）"><a href="#Docker、k8s（7-天）" class="headerlink" title="Docker、k8s（7 天）"></a>Docker、k8s（7 天）</h1><blockquote>
<p>将应用和环境进行封装，相互隔离、独立部署、便于移植，提高安全性、提高开发和维护效率。 便于实现微服务、持续集成和交付。</p>
</blockquote>
<h2 id="知识-4"><a href="#知识-4" class="headerlink" title="知识"></a>知识</h2><ul>
<li><strong>Docker</strong><ul>
<li>容器概念</li>
<li>镜像</li>
<li>部署服务</li>
<li>Dockerfile</li>
</ul>
</li>
<li><strong>K8S（Kubernetes）</strong><ul>
<li>架构</li>
<li>部署应用</li>
<li>暴露服务</li>
<li>动态扩缩容</li>
</ul>
</li>
</ul>
<h2 id="学习建议-4"><a href="#学习建议-4" class="headerlink" title="学习建议"></a>学习建议</h2><blockquote>
<p>会用 Docker &#x2F; K8S 部署项目和服务就行，企业一般都有现成的平台直接用，面试考察不多，不用花太多时间。</p>
</blockquote>
<h2 id="资源-4"><a href="#资源-4" class="headerlink" title="资源"></a>资源</h2><ul>
<li><strong>视频</strong><ul>
<li>⭐【狂神说】Docker 最新超详细版教程通俗易懂：<a href="https://www.bilibili.com/video/BV1og4y1q7M4">https://www.bilibili.com/video/BV1og4y1q7M4</a></li>
<li>K8S 视频教程：<a href="https://www.bilibili.com/video/BV1K5411N7j8">https://www.bilibili.com/video/BV1K5411N7j8</a></li>
</ul>
</li>
<li><strong>书籍</strong><ul>
<li>《深入浅出 Docker》：<a href="https://www.zhihu.com/pub/reader/119632192">https://www.zhihu.com/pub/reader/119632192</a></li>
</ul>
</li>
<li><strong>文档</strong><ul>
<li>Docker — 从入门到实践：<a href="https://vuepress.mirror.docker-practice.com/">https://vuepress.mirror.docker-practice.com/</a></li>
<li>菜鸟教程 Docker：<a href="https://www.runoob.com/docker/docker-tutorial.html">https://www.runoob.com/docker/docker-tutorial.html</a></li>
<li>国外 Docker 官方文档：<a href="https://docs.docker.com/get-started/">https://docs.docker.com/get-started/</a></li>
</ul>
</li>
<li><strong>网站</strong><ul>
<li>Docker 中文社区：<a href="https://www.docker.org.cn/">https://www.docker.org.cn/</a>（强烈推荐，有很多 Docker 技术文章和学习笔记）</li>
<li>Docker Blog：<a href="https://www.docker.com/blog/">https://www.docker.com/blog/</a>（国外 Docker 技术博客）</li>
</ul>
</li>
<li><strong>镜像源</strong><ul>
<li>Docker Hub：<a href="https://hub.docker.com/">https://hub.docker.com</a></li>
<li>腾讯软件源：<a href="http://mirrors.tencent.com/#/index">http://mirrors.tencent.com/#/index</a></li>
<li>阿里云 Docker 仓库：<a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com/</a></li>
</ul>
</li>
</ul>
<h1 id="CI-x2F-CD（3-天）"><a href="#CI-x2F-CD（3-天）" class="headerlink" title="CI &#x2F; CD（3 天）"></a>CI &#x2F; CD（3 天）</h1><blockquote>
<p>持续集成 &#x2F; 持续交付，贯穿整个研发到项目上线的过程，提高效率。 大公司一般都有自己的 CI &#x2F; CD 平台。</p>
</blockquote>
<h2 id="知识-5"><a href="#知识-5" class="headerlink" title="知识"></a>知识</h2><ul>
<li>什么是 CI &#x2F; CD</li>
<li>CI &#x2F; CD 有什么好处</li>
<li>使用任一 CI &#x2F; CD 平台</li>
</ul>
<h2 id="学习建议-5"><a href="#学习建议-5" class="headerlink" title="学习建议"></a>学习建议</h2><blockquote>
<p>了解它是什么，并且实战使用任一 CI &#x2F; CD 平台，感受它和传统开发运维到底有什么不同，就足够了。其实很简单，不要花太多时间。 真正要自己去搭建的时候，跟着官方文档来就行。</p>
</blockquote>
<h2 id="资源-5"><a href="#资源-5" class="headerlink" title="资源"></a>资源</h2><ul>
<li><strong>视频</strong><ul>
<li>⭐【狂神说】CI&#x2F;CD到底是什么？十分钟理解企业级DevOps：<a href="https://www.bilibili.com/video/BV1zf4y127vu">https://www.bilibili.com/video/BV1zf4y127vu</a>（讲得非常棒，带你快速理解 CI &#x2F; CD 的作用和部分原理）</li>
<li>尚硅谷 - Jenkins 持续集成工具教程：<a href="https://www.bilibili.com/video/BV1GW411w7pn">https://www.bilibili.com/video/BV1GW411w7pn</a>（实在要用到 Jenkins 再去学）</li>
</ul>
</li>
<li><strong>文档</strong><ul>
<li>Jenkins 官方文档：<a href="https://www.jenkins.io/zh/">https://www.jenkins.io/zh/ </a>（有很多案例，要用的时候查一下就行了）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java全栈学习路线</category>
      </categories>
      <tags>
        <tag>Java全栈学习路线</tag>
      </tags>
  </entry>
  <entry>
    <title>阶段6：Java高级</title>
    <url>//post/%E9%98%B6%E6%AE%B56%EF%BC%9AJava%E9%AB%98%E7%BA%A7.html</url>
    <content><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><blockquote>
<p>不满足于能做，而是通过更 <strong>深入</strong> 和 <strong>广泛</strong> 的学习，实现高质量的代码和更优秀的架构，培养解决问题的能力。</p>
</blockquote>
<h1 id="并发编程（21-天）"><a href="#并发编程（21-天）" class="headerlink" title="并发编程（21 天）"></a>并发编程（21 天）</h1><blockquote>
<p>对 Java 后端开发程序员来说，懂得如何利用有限的系统资源来提高系统的性能是很重要的，也是大厂面试考察的重点，因此并发编程（尤其是 Java 并发包的使用）这块的知识很重要。 把它放到高级，是因为在学并发编程前，需要有一定的编程经验、了解一定的操作系统知识。</p>
</blockquote>
<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ul>
<li>线程和进程</li>
<li>线程状态</li>
<li>并行和并发</li>
<li>同步和异步</li>
<li>Synchronized</li>
<li>Volatile 关键字</li>
<li>Lock 锁</li>
<li>死锁</li>
<li>可重入锁</li>
<li>线程安全</li>
<li>线程池</li>
<li>JUC 的使用</li>
<li>AQS</li>
<li>Fork Join</li>
<li>CAS</li>
</ul>
<h2 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h2><blockquote>
<p>并发编程入门不难，依然是 <strong>先学会使用</strong> 基础的 Java 并发包， 再通过大量地实践和测试，了解一些原理，才能真正掌握何时使用、如何更合理地使用并发编程。</p>
</blockquote>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><strong>视频</strong><ul>
<li>⭐【尚硅谷】大厂必备技术之JUC并发编程2021最新版：<a href="https://www.bilibili.com/video/BV1Kw411Z7dF">https://www.bilibili.com/video/BV1Kw411Z7dF</a>（特点是短、精、新）</li>
<li>黑马程序员全面深入学习Java并发编程：<a href="https://www.bilibili.com/video/BV16J411h7Rd">https://www.bilibili.com/video/BV16J411h7Rd</a>（讲得很细、全面深入）</li>
</ul>
</li>
<li><strong>书籍</strong><ul>
<li>⭐《Java并发编程实战》（国外的经典）</li>
<li>⭐《Java 并发编程艺术》（国人写的，理论思想内容较多，有时间建议反复看）</li>
</ul>
</li>
<li><strong>项目</strong><ul>
<li>⭐ Java 并发知识点总结：<a href="https://github.com/Wasabi1234/Java-Concurrency-Progamming-Tutorial">https://github.com/Wasabi1234/Java-Concurrency-Progamming-Tutorial</a></li>
</ul>
</li>
</ul>
<h1 id="JVM（30-天）"><a href="#JVM（30-天）" class="headerlink" title="JVM（30 天）"></a>JVM（30 天）</h1><blockquote>
<p>想要深入理解 Java，探秘 Java 跨平台的奥秘，一定要了解 Java 底层的虚拟机技术。 了解虚拟机、掌握虚拟机性能调优方法，有助于你写出更高性能、资源占用更小的优质程序。 在学习 JVM 的过程中，也能学到很多精妙的设计，开拓思路。</p>
</blockquote>
<h2 id="知识-1"><a href="#知识-1" class="headerlink" title="知识"></a>知识</h2><ul>
<li>JVM 内存结构</li>
<li>JVM 生命周期</li>
<li>主流虚拟机</li>
<li>Java 代码执行流程</li>
<li>类加载<ul>
<li>类加载器</li>
<li>类加载过程</li>
<li>双亲委派机制</li>
</ul>
</li>
<li>垃圾回收<ul>
<li>垃圾回收器</li>
<li>垃圾回收策略</li>
<li>垃圾回收算法</li>
<li>StopTheWorld</li>
</ul>
</li>
<li>字节码</li>
<li>内存分配和回收</li>
<li>JVM 性能调优<ul>
<li>性能分析方法</li>
<li>常用工具</li>
<li>参数设置</li>
</ul>
</li>
</ul>
<h2 id="学习建议-1"><a href="#学习建议-1" class="headerlink" title="学习建议"></a>学习建议</h2><blockquote>
<p>JVM 的知识略显枯燥，建议先看视频，有实操的地方一定要实操！自己多去分析。 第一遍不理解没有关系，可以再看书来巩固，想要真正学好，《深入理解 Java 虚拟机（第三版）》一定要读。 如果只是为了通过面试可以直接看更精简的视频，比如狂神的。</p>
</blockquote>
<h2 id="资源-1"><a href="#资源-1" class="headerlink" title="资源"></a>资源</h2><ul>
<li><strong>视频</strong><ul>
<li>⭐ 尚硅谷宋红康 - JVM 全套教程详解：<a href="https://www.bilibili.com/video/BV1PJ411n7xZ">https://www.bilibili.com/video/BV1PJ411n7xZ</a>（讲得相当全面，附有实操）</li>
<li>【狂神说Java】JVM快速入门篇：<a href="https://www.bilibili.com/video/BV1iJ411d7jS">https://www.bilibili.com/video/BV1iJ411d7jS</a>（讲得有点浅，但都是面试重点，时间紧的小伙伴可以直接看这个）</li>
</ul>
</li>
<li><strong>书籍</strong><ul>
<li>⭐《深入理解 Java 虚拟机（第三版）》（有理论有实践，内容丰富，不可多得的 JVM 学习神书）</li>
</ul>
</li>
<li><strong>项目</strong><ul>
<li>⭐ Java 虚拟机底层原理知识总结：<a href="https://github.com/doocs/jvm">https://github.com/doocs/jvm</a></li>
</ul>
</li>
<li><strong>实战</strong><ul>
<li>阿里云 JVM 实战：<a href="https://developer.aliyun.com/graph/java/point/64">https://developer.aliyun.com/graph/java/point/64</a></li>
</ul>
</li>
</ul>
<h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><ul>
<li><strong>分布式理论</strong><ul>
<li>CAP</li>
<li>BASE</li>
</ul>
</li>
<li><strong>分布式缓存</strong><ul>
<li>Redis</li>
<li>Memcached</li>
<li>Etcd</li>
</ul>
</li>
<li><strong>一致性算法</strong><ul>
<li>Raft</li>
<li>一致性哈希</li>
</ul>
</li>
<li><strong>分布式事务</strong></li>
<li><strong>分布式 id 生成</strong></li>
<li><strong>分布式服务调用</strong></li>
<li><strong>分布式存储</strong></li>
<li><strong>分布式数据库</strong></li>
<li><strong>分布式文件系统</strong></li>
<li><strong>分布式协调</strong><ul>
<li>Zookeeper</li>
</ul>
<p>	</p>
</li>
<li><strong>分布式监控</strong><ul>
<li>Prometheus</li>
</ul>
</li>
<li><strong>分布式消息队列</strong><ul>
<li>RabbitMQ</li>
<li>Kafka</li>
<li>rocketmq</li>
</ul>
</li>
<li><strong>分布式日志收集</strong><ul>
<li>Elastic Stack</li>
<li>Loki</li>
</ul>
</li>
<li><strong>分布式搜索引擎</strong><ul>
<li>Elasticsearch</li>
</ul>
</li>
<li><strong>分布式链路追踪</strong><ul>
<li>Apache SkyWalking</li>
</ul>
</li>
<li><strong>分布式配置中心</strong><ul>
<li>Apollo</li>
<li>Nacos</li>
</ul>
</li>
</ul>
<h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><ul>
<li>主从</li>
<li>异地多活</li>
<li>容灾备份</li>
</ul>
<h2 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h2><ul>
<li><strong>数据库</strong><ul>
<li>分库分表</li>
<li>读写分离</li>
</ul>
</li>
<li><strong>缓存</strong><ul>
<li>缓存雪崩</li>
<li>缓存击穿</li>
<li>缓存穿透</li>
</ul>
</li>
<li><strong>负载均衡</strong><ul>
<li>负载均衡算法</li>
<li>软硬件负载均衡（2、3、4、7 层）</li>
</ul>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>监控告警</li>
<li>领域驱动设计</li>
<li>应用安全</li>
<li>线上故障分析</li>
<li>服务网格</li>
<li>Serverless</li>
<li>云原生</li>
</ul>
]]></content>
      <categories>
        <category>Java全栈学习路线</category>
      </categories>
      <tags>
        <tag>Java全栈学习路线</tag>
      </tags>
  </entry>
  <entry>
    <title>阶段8：职业规划</title>
    <url>//post/%E9%98%B6%E6%AE%B58%EF%BC%9A%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92.html</url>
    <content><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><blockquote>
<p>持续追求技术的深度和广度，培养自己的 <strong>核心竞争力</strong>和 <strong>不可替代性</strong> ，学无止境！</p>
</blockquote>
<h1 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h1><blockquote>
<p>自主学习，自主搜索教程，多看书，多阅读技术博客，多实践。</p>
</blockquote>
<h1 id="学习方向"><a href="#学习方向" class="headerlink" title="学习方向"></a>学习方向</h1><h2 id="框架源码"><a href="#框架源码" class="headerlink" title="框架源码"></a>框架源码</h2><ul>
<li>Spring</li>
<li>SpringBoot</li>
<li>SpringMVC</li>
<li>MyBatis</li>
<li>Netty</li>
<li>Dubbo</li>
<li>SpringCloud</li>
</ul>
<h2 id="计算机原理"><a href="#计算机原理" class="headerlink" title="计算机原理"></a>计算机原理</h2><ul>
<li>《算法导论》：<a href="https://www.bilibili.com/video/av48922404">https://www.bilibili.com/video/av48922404</a></li>
<li>《现代操作系统》：<a href="https://www.bilibili.com/video/av9555596">https://www.bilibili.com/video/av9555596</a></li>
<li>《深入理解计算机系统》：<a href="https://www.bilibili.com/video/av31289365">https://www.bilibili.com/video/av31289365</a></li>
<li>《编译原理》： <a href="https://www.bilibili.com/video/av17649289">https://www.bilibili.com/video/av17649289</a></li>
<li>《计算机网络：自顶向下方法》：<a href="https://www.bilibili.com/video/BV1JV411t7ow">https://www.bilibili.com/video/BV1JV411t7ow</a></li>
<li>《计算机程序的构造和解释》：<a href="https://www.bilibili.com/video/BV1v64y1Q78o">https://www.bilibili.com/video/BV1v64y1Q78o</a></li>
<li>《数据库系统》：<a href="https://www.bilibili.com/video/BV1PJ411F78b">https://www.bilibili.com/video/BV1PJ411F78b</a></li>
</ul>
<h2 id="数据库-x2F-中间件-x2F-分布式"><a href="#数据库-x2F-中间件-x2F-分布式" class="headerlink" title="数据库 &#x2F; 中间件 &#x2F; 分布式"></a>数据库 &#x2F; 中间件 &#x2F; 分布式</h2><ul>
<li><strong>数据库</strong><ul>
<li>MySQL</li>
<li>PostgreSQL</li>
</ul>
</li>
<li><strong>缓存</strong><ul>
<li>Redis</li>
</ul>
</li>
<li><strong>队列</strong><ul>
<li>Apache Kafka</li>
<li>Apache Pulsar</li>
</ul>
</li>
<li><strong>搜索引擎</strong><ul>
<li>Elastic Stack</li>
</ul>
</li>
<li><strong>容器</strong><ul>
<li>Docker</li>
<li>K8S</li>
</ul>
</li>
</ul>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul>
<li>广告</li>
<li>电商</li>
<li>搜索</li>
<li>游戏</li>
<li>即时通讯</li>
<li>社交</li>
<li>CMS</li>
<li>ERP</li>
<li>OA</li>
</ul>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><ul>
<li>亿级流量架构</li>
<li>秒杀系统</li>
<li>架构选型能力</li>
</ul>
<h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><ul>
<li>5V 特点</li>
<li>Hadoop</li>
<li>HDFS</li>
<li>MapReduce</li>
<li>Spark</li>
<li>Flink</li>
<li>Storm</li>
<li>Hive</li>
<li>HBase</li>
<li>Druid</li>
<li>Kylin</li>
<li>Pig</li>
<li>Mahout</li>
</ul>
<h2 id="前沿技术"><a href="#前沿技术" class="headerlink" title="前沿技术"></a>前沿技术</h2><ul>
<li>云原生：<a href="https://www.jianshu.com/p/a37baa7c3eff">https://www.jianshu.com/p/a37baa7c3eff</a></li>
<li>Quasar Framework：<a href="http://www.quasarchs.com/">http://www.quasarchs.com/</a></li>
</ul>
<h1 id="自学-Java-专题资源"><a href="#自学-Java-专题资源" class="headerlink" title="自学 Java 专题资源"></a>自学 Java 专题资源</h1><ul>
<li>GitHub Java 专区：<a href="https://github.com/topics/java">https://github.com/topics/java</a></li>
<li>GitHub Java 合集：<a href="https://github.com/akullpp/awesome-java">https://github.com/akullpp/awesome-java</a></li>
<li>StackOverflow：<a href="https://stackoverflow.com/questions/tagged/java">https://stackoverflow.com/questions/tagged/java</a></li>
<li>掘金 Java 专区：<a href="https://juejin.cn/tag/Java">https://juejin.cn/tag/Java</a></li>
<li>美团技术团队：<a href="https://tech.meituan.com/">https://tech.meituan.com/</a></li>
<li>阿里技术团队：<a href="https://102.alibaba.com/tech/list/">https://102.alibaba.com/tech/list/</a></li>
<li>有赞技术团队：<a href="https://tech.youzan.com/tag/back-end/">https://tech.youzan.com/tag/back-end/</a></li>
</ul>
]]></content>
      <categories>
        <category>Java全栈学习路线</category>
      </categories>
      <tags>
        <tag>Java全栈学习路线</tag>
      </tags>
  </entry>
</search>
